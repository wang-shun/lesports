/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lesports.bole.api.vo;

import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-7-5")
public class TOlympicConfig implements org.apache.thrift.TBase<TOlympicConfig, TOlympicConfig._Fields>, java.io.Serializable, Cloneable, Comparable<TOlympicConfig> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TOlympicConfig");

  private static final org.apache.thrift.protocol.TField ELEMENT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("elementPath", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PROPERTY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("propertyName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField FORMATTER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("formatterType", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ANNOTATION_FIELD_DESC = new org.apache.thrift.protocol.TField("annotation", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField RIGHT_ELEMENT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("rightElementPath", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField OP_FIELD_DESC = new org.apache.thrift.protocol.TField("op", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TOlympicConfigStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TOlympicConfigTupleSchemeFactory());
  }

  private String elementPath; // optional
  private String propertyName; // optional
  private String formatterType; // optional
  private String annotation; // optional
  private String rightElementPath; // optional
  private String op; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ELEMENT_PATH((short)1, "elementPath"),
    PROPERTY_NAME((short)2, "propertyName"),
    FORMATTER_TYPE((short)3, "formatterType"),
    ANNOTATION((short)4, "annotation"),
    RIGHT_ELEMENT_PATH((short)5, "rightElementPath"),
    OP((short)6, "op");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ELEMENT_PATH
          return ELEMENT_PATH;
        case 2: // PROPERTY_NAME
          return PROPERTY_NAME;
        case 3: // FORMATTER_TYPE
          return FORMATTER_TYPE;
        case 4: // ANNOTATION
          return ANNOTATION;
        case 5: // RIGHT_ELEMENT_PATH
          return RIGHT_ELEMENT_PATH;
        case 6: // OP
          return OP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.ELEMENT_PATH,_Fields.PROPERTY_NAME,_Fields.FORMATTER_TYPE,_Fields.ANNOTATION,_Fields.RIGHT_ELEMENT_PATH,_Fields.OP};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ELEMENT_PATH, new org.apache.thrift.meta_data.FieldMetaData("elementPath", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROPERTY_NAME, new org.apache.thrift.meta_data.FieldMetaData("propertyName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FORMATTER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("formatterType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ANNOTATION, new org.apache.thrift.meta_data.FieldMetaData("annotation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RIGHT_ELEMENT_PATH, new org.apache.thrift.meta_data.FieldMetaData("rightElementPath", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OP, new org.apache.thrift.meta_data.FieldMetaData("op", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TOlympicConfig.class, metaDataMap);
  }

  public TOlympicConfig() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TOlympicConfig(TOlympicConfig other) {
    if (other.isSetElementPath()) {
      this.elementPath = other.elementPath;
    }
    if (other.isSetPropertyName()) {
      this.propertyName = other.propertyName;
    }
    if (other.isSetFormatterType()) {
      this.formatterType = other.formatterType;
    }
    if (other.isSetAnnotation()) {
      this.annotation = other.annotation;
    }
    if (other.isSetRightElementPath()) {
      this.rightElementPath = other.rightElementPath;
    }
    if (other.isSetOp()) {
      this.op = other.op;
    }
  }

  public TOlympicConfig deepCopy() {
    return new TOlympicConfig(this);
  }

  @Override
  public void clear() {
    this.elementPath = null;
    this.propertyName = null;
    this.formatterType = null;
    this.annotation = null;
    this.rightElementPath = null;
    this.op = null;
  }

  public String getElementPath() {
    return this.elementPath;
  }

  public void setElementPath(String elementPath) {
    this.elementPath = elementPath;
  }

  public void unsetElementPath() {
    this.elementPath = null;
  }

  /** Returns true if field elementPath is set (has been assigned a value) and false otherwise */
  public boolean isSetElementPath() {
    return this.elementPath != null;
  }

  public void setElementPathIsSet(boolean value) {
    if (!value) {
      this.elementPath = null;
    }
  }

  public String getPropertyName() {
    return this.propertyName;
  }

  public void setPropertyName(String propertyName) {
    this.propertyName = propertyName;
  }

  public void unsetPropertyName() {
    this.propertyName = null;
  }

  /** Returns true if field propertyName is set (has been assigned a value) and false otherwise */
  public boolean isSetPropertyName() {
    return this.propertyName != null;
  }

  public void setPropertyNameIsSet(boolean value) {
    if (!value) {
      this.propertyName = null;
    }
  }

  public String getFormatterType() {
    return this.formatterType;
  }

  public void setFormatterType(String formatterType) {
    this.formatterType = formatterType;
  }

  public void unsetFormatterType() {
    this.formatterType = null;
  }

  /** Returns true if field formatterType is set (has been assigned a value) and false otherwise */
  public boolean isSetFormatterType() {
    return this.formatterType != null;
  }

  public void setFormatterTypeIsSet(boolean value) {
    if (!value) {
      this.formatterType = null;
    }
  }

  public String getAnnotation() {
    return this.annotation;
  }

  public void setAnnotation(String annotation) {
    this.annotation = annotation;
  }

  public void unsetAnnotation() {
    this.annotation = null;
  }

  /** Returns true if field annotation is set (has been assigned a value) and false otherwise */
  public boolean isSetAnnotation() {
    return this.annotation != null;
  }

  public void setAnnotationIsSet(boolean value) {
    if (!value) {
      this.annotation = null;
    }
  }

  public String getRightElementPath() {
    return this.rightElementPath;
  }

  public void setRightElementPath(String rightElementPath) {
    this.rightElementPath = rightElementPath;
  }

  public void unsetRightElementPath() {
    this.rightElementPath = null;
  }

  /** Returns true if field rightElementPath is set (has been assigned a value) and false otherwise */
  public boolean isSetRightElementPath() {
    return this.rightElementPath != null;
  }

  public void setRightElementPathIsSet(boolean value) {
    if (!value) {
      this.rightElementPath = null;
    }
  }

  public String getOp() {
    return this.op;
  }

  public void setOp(String op) {
    this.op = op;
  }

  public void unsetOp() {
    this.op = null;
  }

  /** Returns true if field op is set (has been assigned a value) and false otherwise */
  public boolean isSetOp() {
    return this.op != null;
  }

  public void setOpIsSet(boolean value) {
    if (!value) {
      this.op = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ELEMENT_PATH:
      if (value == null) {
        unsetElementPath();
      } else {
        setElementPath((String)value);
      }
      break;

    case PROPERTY_NAME:
      if (value == null) {
        unsetPropertyName();
      } else {
        setPropertyName((String)value);
      }
      break;

    case FORMATTER_TYPE:
      if (value == null) {
        unsetFormatterType();
      } else {
        setFormatterType((String)value);
      }
      break;

    case ANNOTATION:
      if (value == null) {
        unsetAnnotation();
      } else {
        setAnnotation((String)value);
      }
      break;

    case RIGHT_ELEMENT_PATH:
      if (value == null) {
        unsetRightElementPath();
      } else {
        setRightElementPath((String)value);
      }
      break;

    case OP:
      if (value == null) {
        unsetOp();
      } else {
        setOp((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ELEMENT_PATH:
      return getElementPath();

    case PROPERTY_NAME:
      return getPropertyName();

    case FORMATTER_TYPE:
      return getFormatterType();

    case ANNOTATION:
      return getAnnotation();

    case RIGHT_ELEMENT_PATH:
      return getRightElementPath();

    case OP:
      return getOp();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ELEMENT_PATH:
      return isSetElementPath();
    case PROPERTY_NAME:
      return isSetPropertyName();
    case FORMATTER_TYPE:
      return isSetFormatterType();
    case ANNOTATION:
      return isSetAnnotation();
    case RIGHT_ELEMENT_PATH:
      return isSetRightElementPath();
    case OP:
      return isSetOp();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TOlympicConfig)
      return this.equals((TOlympicConfig)that);
    return false;
  }

  public boolean equals(TOlympicConfig that) {
    if (that == null)
      return false;

    boolean this_present_elementPath = true && this.isSetElementPath();
    boolean that_present_elementPath = true && that.isSetElementPath();
    if (this_present_elementPath || that_present_elementPath) {
      if (!(this_present_elementPath && that_present_elementPath))
        return false;
      if (!this.elementPath.equals(that.elementPath))
        return false;
    }

    boolean this_present_propertyName = true && this.isSetPropertyName();
    boolean that_present_propertyName = true && that.isSetPropertyName();
    if (this_present_propertyName || that_present_propertyName) {
      if (!(this_present_propertyName && that_present_propertyName))
        return false;
      if (!this.propertyName.equals(that.propertyName))
        return false;
    }

    boolean this_present_formatterType = true && this.isSetFormatterType();
    boolean that_present_formatterType = true && that.isSetFormatterType();
    if (this_present_formatterType || that_present_formatterType) {
      if (!(this_present_formatterType && that_present_formatterType))
        return false;
      if (!this.formatterType.equals(that.formatterType))
        return false;
    }

    boolean this_present_annotation = true && this.isSetAnnotation();
    boolean that_present_annotation = true && that.isSetAnnotation();
    if (this_present_annotation || that_present_annotation) {
      if (!(this_present_annotation && that_present_annotation))
        return false;
      if (!this.annotation.equals(that.annotation))
        return false;
    }

    boolean this_present_rightElementPath = true && this.isSetRightElementPath();
    boolean that_present_rightElementPath = true && that.isSetRightElementPath();
    if (this_present_rightElementPath || that_present_rightElementPath) {
      if (!(this_present_rightElementPath && that_present_rightElementPath))
        return false;
      if (!this.rightElementPath.equals(that.rightElementPath))
        return false;
    }

    boolean this_present_op = true && this.isSetOp();
    boolean that_present_op = true && that.isSetOp();
    if (this_present_op || that_present_op) {
      if (!(this_present_op && that_present_op))
        return false;
      if (!this.op.equals(that.op))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_elementPath = true && (isSetElementPath());
    list.add(present_elementPath);
    if (present_elementPath)
      list.add(elementPath);

    boolean present_propertyName = true && (isSetPropertyName());
    list.add(present_propertyName);
    if (present_propertyName)
      list.add(propertyName);

    boolean present_formatterType = true && (isSetFormatterType());
    list.add(present_formatterType);
    if (present_formatterType)
      list.add(formatterType);

    boolean present_annotation = true && (isSetAnnotation());
    list.add(present_annotation);
    if (present_annotation)
      list.add(annotation);

    boolean present_rightElementPath = true && (isSetRightElementPath());
    list.add(present_rightElementPath);
    if (present_rightElementPath)
      list.add(rightElementPath);

    boolean present_op = true && (isSetOp());
    list.add(present_op);
    if (present_op)
      list.add(op);

    return list.hashCode();
  }

  @Override
  public int compareTo(TOlympicConfig other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetElementPath()).compareTo(other.isSetElementPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetElementPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.elementPath, other.elementPath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPropertyName()).compareTo(other.isSetPropertyName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPropertyName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.propertyName, other.propertyName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFormatterType()).compareTo(other.isSetFormatterType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFormatterType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.formatterType, other.formatterType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAnnotation()).compareTo(other.isSetAnnotation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnnotation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.annotation, other.annotation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRightElementPath()).compareTo(other.isSetRightElementPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRightElementPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rightElementPath, other.rightElementPath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOp()).compareTo(other.isSetOp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.op, other.op);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TOlympicConfig(");
    boolean first = true;

    if (isSetElementPath()) {
      sb.append("elementPath:");
      if (this.elementPath == null) {
        sb.append("null");
      } else {
        sb.append(this.elementPath);
      }
      first = false;
    }
    if (isSetPropertyName()) {
      if (!first) sb.append(", ");
      sb.append("propertyName:");
      if (this.propertyName == null) {
        sb.append("null");
      } else {
        sb.append(this.propertyName);
      }
      first = false;
    }
    if (isSetFormatterType()) {
      if (!first) sb.append(", ");
      sb.append("formatterType:");
      if (this.formatterType == null) {
        sb.append("null");
      } else {
        sb.append(this.formatterType);
      }
      first = false;
    }
    if (isSetAnnotation()) {
      if (!first) sb.append(", ");
      sb.append("annotation:");
      if (this.annotation == null) {
        sb.append("null");
      } else {
        sb.append(this.annotation);
      }
      first = false;
    }
    if (isSetRightElementPath()) {
      if (!first) sb.append(", ");
      sb.append("rightElementPath:");
      if (this.rightElementPath == null) {
        sb.append("null");
      } else {
        sb.append(this.rightElementPath);
      }
      first = false;
    }
    if (isSetOp()) {
      if (!first) sb.append(", ");
      sb.append("op:");
      if (this.op == null) {
        sb.append("null");
      } else {
        sb.append(this.op);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TOlympicConfigStandardSchemeFactory implements SchemeFactory {
    public TOlympicConfigStandardScheme getScheme() {
      return new TOlympicConfigStandardScheme();
    }
  }

  private static class TOlympicConfigStandardScheme extends StandardScheme<TOlympicConfig> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TOlympicConfig struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ELEMENT_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.elementPath = iprot.readString();
              struct.setElementPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROPERTY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.propertyName = iprot.readString();
              struct.setPropertyNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FORMATTER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.formatterType = iprot.readString();
              struct.setFormatterTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ANNOTATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.annotation = iprot.readString();
              struct.setAnnotationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RIGHT_ELEMENT_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rightElementPath = iprot.readString();
              struct.setRightElementPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // OP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.op = iprot.readString();
              struct.setOpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TOlympicConfig struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.elementPath != null) {
        if (struct.isSetElementPath()) {
          oprot.writeFieldBegin(ELEMENT_PATH_FIELD_DESC);
          oprot.writeString(struct.elementPath);
          oprot.writeFieldEnd();
        }
      }
      if (struct.propertyName != null) {
        if (struct.isSetPropertyName()) {
          oprot.writeFieldBegin(PROPERTY_NAME_FIELD_DESC);
          oprot.writeString(struct.propertyName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.formatterType != null) {
        if (struct.isSetFormatterType()) {
          oprot.writeFieldBegin(FORMATTER_TYPE_FIELD_DESC);
          oprot.writeString(struct.formatterType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.annotation != null) {
        if (struct.isSetAnnotation()) {
          oprot.writeFieldBegin(ANNOTATION_FIELD_DESC);
          oprot.writeString(struct.annotation);
          oprot.writeFieldEnd();
        }
      }
      if (struct.rightElementPath != null) {
        if (struct.isSetRightElementPath()) {
          oprot.writeFieldBegin(RIGHT_ELEMENT_PATH_FIELD_DESC);
          oprot.writeString(struct.rightElementPath);
          oprot.writeFieldEnd();
        }
      }
      if (struct.op != null) {
        if (struct.isSetOp()) {
          oprot.writeFieldBegin(OP_FIELD_DESC);
          oprot.writeString(struct.op);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TOlympicConfigTupleSchemeFactory implements SchemeFactory {
    public TOlympicConfigTupleScheme getScheme() {
      return new TOlympicConfigTupleScheme();
    }
  }

  private static class TOlympicConfigTupleScheme extends TupleScheme<TOlympicConfig> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TOlympicConfig struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetElementPath()) {
        optionals.set(0);
      }
      if (struct.isSetPropertyName()) {
        optionals.set(1);
      }
      if (struct.isSetFormatterType()) {
        optionals.set(2);
      }
      if (struct.isSetAnnotation()) {
        optionals.set(3);
      }
      if (struct.isSetRightElementPath()) {
        optionals.set(4);
      }
      if (struct.isSetOp()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetElementPath()) {
        oprot.writeString(struct.elementPath);
      }
      if (struct.isSetPropertyName()) {
        oprot.writeString(struct.propertyName);
      }
      if (struct.isSetFormatterType()) {
        oprot.writeString(struct.formatterType);
      }
      if (struct.isSetAnnotation()) {
        oprot.writeString(struct.annotation);
      }
      if (struct.isSetRightElementPath()) {
        oprot.writeString(struct.rightElementPath);
      }
      if (struct.isSetOp()) {
        oprot.writeString(struct.op);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TOlympicConfig struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.elementPath = iprot.readString();
        struct.setElementPathIsSet(true);
      }
      if (incoming.get(1)) {
        struct.propertyName = iprot.readString();
        struct.setPropertyNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.formatterType = iprot.readString();
        struct.setFormatterTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.annotation = iprot.readString();
        struct.setAnnotationIsSet(true);
      }
      if (incoming.get(4)) {
        struct.rightElementPath = iprot.readString();
        struct.setRightElementPathIsSet(true);
      }
      if (incoming.get(5)) {
        struct.op = iprot.readString();
        struct.setOpIsSet(true);
      }
    }
  }

}

