/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lesports.bole.api.vo;

import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-7-5")
public class TOlympicLiveConfigSet implements org.apache.thrift.TBase<TOlympicLiveConfigSet, TOlympicLiveConfigSet._Fields>, java.io.Serializable, Cloneable, Comparable<TOlympicLiveConfigSet> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TOlympicLiveConfigSet");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField COMPETITOR_STATS_CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("competitorStatsConfig", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField PLAYER_STATS_CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("playerStatsConfig", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField TEAM_EXTEND_CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("teamExtendConfig", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField PLAYER_EXTEND_CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("playerExtendConfig", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField MATCH_EXTEND_CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("matchExtendConfig", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField RESULT_CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("resultConfig", org.apache.thrift.protocol.TType.LIST, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TOlympicLiveConfigSetStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TOlympicLiveConfigSetTupleSchemeFactory());
  }

  private String id; // required
  private List<TOlympicConfig> competitorStatsConfig; // optional
  private List<TOlympicConfig> playerStatsConfig; // optional
  private List<TOlympicConfig> teamExtendConfig; // optional
  private List<TOlympicConfig> playerExtendConfig; // optional
  private List<TOlympicConfig> matchExtendConfig; // optional
  private List<TOlympicConfig> resultConfig; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    COMPETITOR_STATS_CONFIG((short)3, "competitorStatsConfig"),
    PLAYER_STATS_CONFIG((short)4, "playerStatsConfig"),
    TEAM_EXTEND_CONFIG((short)5, "teamExtendConfig"),
    PLAYER_EXTEND_CONFIG((short)6, "playerExtendConfig"),
    MATCH_EXTEND_CONFIG((short)7, "matchExtendConfig"),
    RESULT_CONFIG((short)8, "resultConfig");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 3: // COMPETITOR_STATS_CONFIG
          return COMPETITOR_STATS_CONFIG;
        case 4: // PLAYER_STATS_CONFIG
          return PLAYER_STATS_CONFIG;
        case 5: // TEAM_EXTEND_CONFIG
          return TEAM_EXTEND_CONFIG;
        case 6: // PLAYER_EXTEND_CONFIG
          return PLAYER_EXTEND_CONFIG;
        case 7: // MATCH_EXTEND_CONFIG
          return MATCH_EXTEND_CONFIG;
        case 8: // RESULT_CONFIG
          return RESULT_CONFIG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.COMPETITOR_STATS_CONFIG,_Fields.PLAYER_STATS_CONFIG,_Fields.TEAM_EXTEND_CONFIG,_Fields.PLAYER_EXTEND_CONFIG,_Fields.MATCH_EXTEND_CONFIG,_Fields.RESULT_CONFIG};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPETITOR_STATS_CONFIG, new org.apache.thrift.meta_data.FieldMetaData("competitorStatsConfig", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TOlympicConfig.class))));
    tmpMap.put(_Fields.PLAYER_STATS_CONFIG, new org.apache.thrift.meta_data.FieldMetaData("playerStatsConfig", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TOlympicConfig.class))));
    tmpMap.put(_Fields.TEAM_EXTEND_CONFIG, new org.apache.thrift.meta_data.FieldMetaData("teamExtendConfig", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TOlympicConfig.class))));
    tmpMap.put(_Fields.PLAYER_EXTEND_CONFIG, new org.apache.thrift.meta_data.FieldMetaData("playerExtendConfig", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TOlympicConfig.class))));
    tmpMap.put(_Fields.MATCH_EXTEND_CONFIG, new org.apache.thrift.meta_data.FieldMetaData("matchExtendConfig", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TOlympicConfig.class))));
    tmpMap.put(_Fields.RESULT_CONFIG, new org.apache.thrift.meta_data.FieldMetaData("resultConfig", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TOlympicConfig.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TOlympicLiveConfigSet.class, metaDataMap);
  }

  public TOlympicLiveConfigSet() {
  }

  public TOlympicLiveConfigSet(
    String id)
  {
    this();
    this.id = id;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TOlympicLiveConfigSet(TOlympicLiveConfigSet other) {
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetCompetitorStatsConfig()) {
      List<TOlympicConfig> __this__competitorStatsConfig = new ArrayList<TOlympicConfig>(other.competitorStatsConfig.size());
      for (TOlympicConfig other_element : other.competitorStatsConfig) {
        __this__competitorStatsConfig.add(new TOlympicConfig(other_element));
      }
      this.competitorStatsConfig = __this__competitorStatsConfig;
    }
    if (other.isSetPlayerStatsConfig()) {
      List<TOlympicConfig> __this__playerStatsConfig = new ArrayList<TOlympicConfig>(other.playerStatsConfig.size());
      for (TOlympicConfig other_element : other.playerStatsConfig) {
        __this__playerStatsConfig.add(new TOlympicConfig(other_element));
      }
      this.playerStatsConfig = __this__playerStatsConfig;
    }
    if (other.isSetTeamExtendConfig()) {
      List<TOlympicConfig> __this__teamExtendConfig = new ArrayList<TOlympicConfig>(other.teamExtendConfig.size());
      for (TOlympicConfig other_element : other.teamExtendConfig) {
        __this__teamExtendConfig.add(new TOlympicConfig(other_element));
      }
      this.teamExtendConfig = __this__teamExtendConfig;
    }
    if (other.isSetPlayerExtendConfig()) {
      List<TOlympicConfig> __this__playerExtendConfig = new ArrayList<TOlympicConfig>(other.playerExtendConfig.size());
      for (TOlympicConfig other_element : other.playerExtendConfig) {
        __this__playerExtendConfig.add(new TOlympicConfig(other_element));
      }
      this.playerExtendConfig = __this__playerExtendConfig;
    }
    if (other.isSetMatchExtendConfig()) {
      List<TOlympicConfig> __this__matchExtendConfig = new ArrayList<TOlympicConfig>(other.matchExtendConfig.size());
      for (TOlympicConfig other_element : other.matchExtendConfig) {
        __this__matchExtendConfig.add(new TOlympicConfig(other_element));
      }
      this.matchExtendConfig = __this__matchExtendConfig;
    }
    if (other.isSetResultConfig()) {
      List<TOlympicConfig> __this__resultConfig = new ArrayList<TOlympicConfig>(other.resultConfig.size());
      for (TOlympicConfig other_element : other.resultConfig) {
        __this__resultConfig.add(new TOlympicConfig(other_element));
      }
      this.resultConfig = __this__resultConfig;
    }
  }

  public TOlympicLiveConfigSet deepCopy() {
    return new TOlympicLiveConfigSet(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.competitorStatsConfig = null;
    this.playerStatsConfig = null;
    this.teamExtendConfig = null;
    this.playerExtendConfig = null;
    this.matchExtendConfig = null;
    this.resultConfig = null;
  }

  public String getId() {
    return this.id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public int getCompetitorStatsConfigSize() {
    return (this.competitorStatsConfig == null) ? 0 : this.competitorStatsConfig.size();
  }

  public java.util.Iterator<TOlympicConfig> getCompetitorStatsConfigIterator() {
    return (this.competitorStatsConfig == null) ? null : this.competitorStatsConfig.iterator();
  }

  public void addToCompetitorStatsConfig(TOlympicConfig elem) {
    if (this.competitorStatsConfig == null) {
      this.competitorStatsConfig = new ArrayList<TOlympicConfig>();
    }
    this.competitorStatsConfig.add(elem);
  }

  public List<TOlympicConfig> getCompetitorStatsConfig() {
    return this.competitorStatsConfig;
  }

  public void setCompetitorStatsConfig(List<TOlympicConfig> competitorStatsConfig) {
    this.competitorStatsConfig = competitorStatsConfig;
  }

  public void unsetCompetitorStatsConfig() {
    this.competitorStatsConfig = null;
  }

  /** Returns true if field competitorStatsConfig is set (has been assigned a value) and false otherwise */
  public boolean isSetCompetitorStatsConfig() {
    return this.competitorStatsConfig != null;
  }

  public void setCompetitorStatsConfigIsSet(boolean value) {
    if (!value) {
      this.competitorStatsConfig = null;
    }
  }

  public int getPlayerStatsConfigSize() {
    return (this.playerStatsConfig == null) ? 0 : this.playerStatsConfig.size();
  }

  public java.util.Iterator<TOlympicConfig> getPlayerStatsConfigIterator() {
    return (this.playerStatsConfig == null) ? null : this.playerStatsConfig.iterator();
  }

  public void addToPlayerStatsConfig(TOlympicConfig elem) {
    if (this.playerStatsConfig == null) {
      this.playerStatsConfig = new ArrayList<TOlympicConfig>();
    }
    this.playerStatsConfig.add(elem);
  }

  public List<TOlympicConfig> getPlayerStatsConfig() {
    return this.playerStatsConfig;
  }

  public void setPlayerStatsConfig(List<TOlympicConfig> playerStatsConfig) {
    this.playerStatsConfig = playerStatsConfig;
  }

  public void unsetPlayerStatsConfig() {
    this.playerStatsConfig = null;
  }

  /** Returns true if field playerStatsConfig is set (has been assigned a value) and false otherwise */
  public boolean isSetPlayerStatsConfig() {
    return this.playerStatsConfig != null;
  }

  public void setPlayerStatsConfigIsSet(boolean value) {
    if (!value) {
      this.playerStatsConfig = null;
    }
  }

  public int getTeamExtendConfigSize() {
    return (this.teamExtendConfig == null) ? 0 : this.teamExtendConfig.size();
  }

  public java.util.Iterator<TOlympicConfig> getTeamExtendConfigIterator() {
    return (this.teamExtendConfig == null) ? null : this.teamExtendConfig.iterator();
  }

  public void addToTeamExtendConfig(TOlympicConfig elem) {
    if (this.teamExtendConfig == null) {
      this.teamExtendConfig = new ArrayList<TOlympicConfig>();
    }
    this.teamExtendConfig.add(elem);
  }

  public List<TOlympicConfig> getTeamExtendConfig() {
    return this.teamExtendConfig;
  }

  public void setTeamExtendConfig(List<TOlympicConfig> teamExtendConfig) {
    this.teamExtendConfig = teamExtendConfig;
  }

  public void unsetTeamExtendConfig() {
    this.teamExtendConfig = null;
  }

  /** Returns true if field teamExtendConfig is set (has been assigned a value) and false otherwise */
  public boolean isSetTeamExtendConfig() {
    return this.teamExtendConfig != null;
  }

  public void setTeamExtendConfigIsSet(boolean value) {
    if (!value) {
      this.teamExtendConfig = null;
    }
  }

  public int getPlayerExtendConfigSize() {
    return (this.playerExtendConfig == null) ? 0 : this.playerExtendConfig.size();
  }

  public java.util.Iterator<TOlympicConfig> getPlayerExtendConfigIterator() {
    return (this.playerExtendConfig == null) ? null : this.playerExtendConfig.iterator();
  }

  public void addToPlayerExtendConfig(TOlympicConfig elem) {
    if (this.playerExtendConfig == null) {
      this.playerExtendConfig = new ArrayList<TOlympicConfig>();
    }
    this.playerExtendConfig.add(elem);
  }

  public List<TOlympicConfig> getPlayerExtendConfig() {
    return this.playerExtendConfig;
  }

  public void setPlayerExtendConfig(List<TOlympicConfig> playerExtendConfig) {
    this.playerExtendConfig = playerExtendConfig;
  }

  public void unsetPlayerExtendConfig() {
    this.playerExtendConfig = null;
  }

  /** Returns true if field playerExtendConfig is set (has been assigned a value) and false otherwise */
  public boolean isSetPlayerExtendConfig() {
    return this.playerExtendConfig != null;
  }

  public void setPlayerExtendConfigIsSet(boolean value) {
    if (!value) {
      this.playerExtendConfig = null;
    }
  }

  public int getMatchExtendConfigSize() {
    return (this.matchExtendConfig == null) ? 0 : this.matchExtendConfig.size();
  }

  public java.util.Iterator<TOlympicConfig> getMatchExtendConfigIterator() {
    return (this.matchExtendConfig == null) ? null : this.matchExtendConfig.iterator();
  }

  public void addToMatchExtendConfig(TOlympicConfig elem) {
    if (this.matchExtendConfig == null) {
      this.matchExtendConfig = new ArrayList<TOlympicConfig>();
    }
    this.matchExtendConfig.add(elem);
  }

  public List<TOlympicConfig> getMatchExtendConfig() {
    return this.matchExtendConfig;
  }

  public void setMatchExtendConfig(List<TOlympicConfig> matchExtendConfig) {
    this.matchExtendConfig = matchExtendConfig;
  }

  public void unsetMatchExtendConfig() {
    this.matchExtendConfig = null;
  }

  /** Returns true if field matchExtendConfig is set (has been assigned a value) and false otherwise */
  public boolean isSetMatchExtendConfig() {
    return this.matchExtendConfig != null;
  }

  public void setMatchExtendConfigIsSet(boolean value) {
    if (!value) {
      this.matchExtendConfig = null;
    }
  }

  public int getResultConfigSize() {
    return (this.resultConfig == null) ? 0 : this.resultConfig.size();
  }

  public java.util.Iterator<TOlympicConfig> getResultConfigIterator() {
    return (this.resultConfig == null) ? null : this.resultConfig.iterator();
  }

  public void addToResultConfig(TOlympicConfig elem) {
    if (this.resultConfig == null) {
      this.resultConfig = new ArrayList<TOlympicConfig>();
    }
    this.resultConfig.add(elem);
  }

  public List<TOlympicConfig> getResultConfig() {
    return this.resultConfig;
  }

  public void setResultConfig(List<TOlympicConfig> resultConfig) {
    this.resultConfig = resultConfig;
  }

  public void unsetResultConfig() {
    this.resultConfig = null;
  }

  /** Returns true if field resultConfig is set (has been assigned a value) and false otherwise */
  public boolean isSetResultConfig() {
    return this.resultConfig != null;
  }

  public void setResultConfigIsSet(boolean value) {
    if (!value) {
      this.resultConfig = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case COMPETITOR_STATS_CONFIG:
      if (value == null) {
        unsetCompetitorStatsConfig();
      } else {
        setCompetitorStatsConfig((List<TOlympicConfig>)value);
      }
      break;

    case PLAYER_STATS_CONFIG:
      if (value == null) {
        unsetPlayerStatsConfig();
      } else {
        setPlayerStatsConfig((List<TOlympicConfig>)value);
      }
      break;

    case TEAM_EXTEND_CONFIG:
      if (value == null) {
        unsetTeamExtendConfig();
      } else {
        setTeamExtendConfig((List<TOlympicConfig>)value);
      }
      break;

    case PLAYER_EXTEND_CONFIG:
      if (value == null) {
        unsetPlayerExtendConfig();
      } else {
        setPlayerExtendConfig((List<TOlympicConfig>)value);
      }
      break;

    case MATCH_EXTEND_CONFIG:
      if (value == null) {
        unsetMatchExtendConfig();
      } else {
        setMatchExtendConfig((List<TOlympicConfig>)value);
      }
      break;

    case RESULT_CONFIG:
      if (value == null) {
        unsetResultConfig();
      } else {
        setResultConfig((List<TOlympicConfig>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case COMPETITOR_STATS_CONFIG:
      return getCompetitorStatsConfig();

    case PLAYER_STATS_CONFIG:
      return getPlayerStatsConfig();

    case TEAM_EXTEND_CONFIG:
      return getTeamExtendConfig();

    case PLAYER_EXTEND_CONFIG:
      return getPlayerExtendConfig();

    case MATCH_EXTEND_CONFIG:
      return getMatchExtendConfig();

    case RESULT_CONFIG:
      return getResultConfig();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case COMPETITOR_STATS_CONFIG:
      return isSetCompetitorStatsConfig();
    case PLAYER_STATS_CONFIG:
      return isSetPlayerStatsConfig();
    case TEAM_EXTEND_CONFIG:
      return isSetTeamExtendConfig();
    case PLAYER_EXTEND_CONFIG:
      return isSetPlayerExtendConfig();
    case MATCH_EXTEND_CONFIG:
      return isSetMatchExtendConfig();
    case RESULT_CONFIG:
      return isSetResultConfig();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TOlympicLiveConfigSet)
      return this.equals((TOlympicLiveConfigSet)that);
    return false;
  }

  public boolean equals(TOlympicLiveConfigSet that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_competitorStatsConfig = true && this.isSetCompetitorStatsConfig();
    boolean that_present_competitorStatsConfig = true && that.isSetCompetitorStatsConfig();
    if (this_present_competitorStatsConfig || that_present_competitorStatsConfig) {
      if (!(this_present_competitorStatsConfig && that_present_competitorStatsConfig))
        return false;
      if (!this.competitorStatsConfig.equals(that.competitorStatsConfig))
        return false;
    }

    boolean this_present_playerStatsConfig = true && this.isSetPlayerStatsConfig();
    boolean that_present_playerStatsConfig = true && that.isSetPlayerStatsConfig();
    if (this_present_playerStatsConfig || that_present_playerStatsConfig) {
      if (!(this_present_playerStatsConfig && that_present_playerStatsConfig))
        return false;
      if (!this.playerStatsConfig.equals(that.playerStatsConfig))
        return false;
    }

    boolean this_present_teamExtendConfig = true && this.isSetTeamExtendConfig();
    boolean that_present_teamExtendConfig = true && that.isSetTeamExtendConfig();
    if (this_present_teamExtendConfig || that_present_teamExtendConfig) {
      if (!(this_present_teamExtendConfig && that_present_teamExtendConfig))
        return false;
      if (!this.teamExtendConfig.equals(that.teamExtendConfig))
        return false;
    }

    boolean this_present_playerExtendConfig = true && this.isSetPlayerExtendConfig();
    boolean that_present_playerExtendConfig = true && that.isSetPlayerExtendConfig();
    if (this_present_playerExtendConfig || that_present_playerExtendConfig) {
      if (!(this_present_playerExtendConfig && that_present_playerExtendConfig))
        return false;
      if (!this.playerExtendConfig.equals(that.playerExtendConfig))
        return false;
    }

    boolean this_present_matchExtendConfig = true && this.isSetMatchExtendConfig();
    boolean that_present_matchExtendConfig = true && that.isSetMatchExtendConfig();
    if (this_present_matchExtendConfig || that_present_matchExtendConfig) {
      if (!(this_present_matchExtendConfig && that_present_matchExtendConfig))
        return false;
      if (!this.matchExtendConfig.equals(that.matchExtendConfig))
        return false;
    }

    boolean this_present_resultConfig = true && this.isSetResultConfig();
    boolean that_present_resultConfig = true && that.isSetResultConfig();
    if (this_present_resultConfig || that_present_resultConfig) {
      if (!(this_present_resultConfig && that_present_resultConfig))
        return false;
      if (!this.resultConfig.equals(that.resultConfig))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_competitorStatsConfig = true && (isSetCompetitorStatsConfig());
    list.add(present_competitorStatsConfig);
    if (present_competitorStatsConfig)
      list.add(competitorStatsConfig);

    boolean present_playerStatsConfig = true && (isSetPlayerStatsConfig());
    list.add(present_playerStatsConfig);
    if (present_playerStatsConfig)
      list.add(playerStatsConfig);

    boolean present_teamExtendConfig = true && (isSetTeamExtendConfig());
    list.add(present_teamExtendConfig);
    if (present_teamExtendConfig)
      list.add(teamExtendConfig);

    boolean present_playerExtendConfig = true && (isSetPlayerExtendConfig());
    list.add(present_playerExtendConfig);
    if (present_playerExtendConfig)
      list.add(playerExtendConfig);

    boolean present_matchExtendConfig = true && (isSetMatchExtendConfig());
    list.add(present_matchExtendConfig);
    if (present_matchExtendConfig)
      list.add(matchExtendConfig);

    boolean present_resultConfig = true && (isSetResultConfig());
    list.add(present_resultConfig);
    if (present_resultConfig)
      list.add(resultConfig);

    return list.hashCode();
  }

  @Override
  public int compareTo(TOlympicLiveConfigSet other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompetitorStatsConfig()).compareTo(other.isSetCompetitorStatsConfig());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompetitorStatsConfig()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.competitorStatsConfig, other.competitorStatsConfig);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlayerStatsConfig()).compareTo(other.isSetPlayerStatsConfig());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlayerStatsConfig()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.playerStatsConfig, other.playerStatsConfig);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeamExtendConfig()).compareTo(other.isSetTeamExtendConfig());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeamExtendConfig()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teamExtendConfig, other.teamExtendConfig);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlayerExtendConfig()).compareTo(other.isSetPlayerExtendConfig());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlayerExtendConfig()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.playerExtendConfig, other.playerExtendConfig);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMatchExtendConfig()).compareTo(other.isSetMatchExtendConfig());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMatchExtendConfig()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchExtendConfig, other.matchExtendConfig);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResultConfig()).compareTo(other.isSetResultConfig());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultConfig()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resultConfig, other.resultConfig);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TOlympicLiveConfigSet(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (isSetCompetitorStatsConfig()) {
      if (!first) sb.append(", ");
      sb.append("competitorStatsConfig:");
      if (this.competitorStatsConfig == null) {
        sb.append("null");
      } else {
        sb.append(this.competitorStatsConfig);
      }
      first = false;
    }
    if (isSetPlayerStatsConfig()) {
      if (!first) sb.append(", ");
      sb.append("playerStatsConfig:");
      if (this.playerStatsConfig == null) {
        sb.append("null");
      } else {
        sb.append(this.playerStatsConfig);
      }
      first = false;
    }
    if (isSetTeamExtendConfig()) {
      if (!first) sb.append(", ");
      sb.append("teamExtendConfig:");
      if (this.teamExtendConfig == null) {
        sb.append("null");
      } else {
        sb.append(this.teamExtendConfig);
      }
      first = false;
    }
    if (isSetPlayerExtendConfig()) {
      if (!first) sb.append(", ");
      sb.append("playerExtendConfig:");
      if (this.playerExtendConfig == null) {
        sb.append("null");
      } else {
        sb.append(this.playerExtendConfig);
      }
      first = false;
    }
    if (isSetMatchExtendConfig()) {
      if (!first) sb.append(", ");
      sb.append("matchExtendConfig:");
      if (this.matchExtendConfig == null) {
        sb.append("null");
      } else {
        sb.append(this.matchExtendConfig);
      }
      first = false;
    }
    if (isSetResultConfig()) {
      if (!first) sb.append(", ");
      sb.append("resultConfig:");
      if (this.resultConfig == null) {
        sb.append("null");
      } else {
        sb.append(this.resultConfig);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TOlympicLiveConfigSetStandardSchemeFactory implements SchemeFactory {
    public TOlympicLiveConfigSetStandardScheme getScheme() {
      return new TOlympicLiveConfigSetStandardScheme();
    }
  }

  private static class TOlympicLiveConfigSetStandardScheme extends StandardScheme<TOlympicLiveConfigSet> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TOlympicLiveConfigSet struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMPETITOR_STATS_CONFIG
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.competitorStatsConfig = new ArrayList<TOlympicConfig>(_list0.size);
                TOlympicConfig _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new TOlympicConfig();
                  _elem1.read(iprot);
                  struct.competitorStatsConfig.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setCompetitorStatsConfigIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PLAYER_STATS_CONFIG
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.playerStatsConfig = new ArrayList<TOlympicConfig>(_list3.size);
                TOlympicConfig _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = new TOlympicConfig();
                  _elem4.read(iprot);
                  struct.playerStatsConfig.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setPlayerStatsConfigIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TEAM_EXTEND_CONFIG
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.teamExtendConfig = new ArrayList<TOlympicConfig>(_list6.size);
                TOlympicConfig _elem7;
                for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                {
                  _elem7 = new TOlympicConfig();
                  _elem7.read(iprot);
                  struct.teamExtendConfig.add(_elem7);
                }
                iprot.readListEnd();
              }
              struct.setTeamExtendConfigIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PLAYER_EXTEND_CONFIG
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list9 = iprot.readListBegin();
                struct.playerExtendConfig = new ArrayList<TOlympicConfig>(_list9.size);
                TOlympicConfig _elem10;
                for (int _i11 = 0; _i11 < _list9.size; ++_i11)
                {
                  _elem10 = new TOlympicConfig();
                  _elem10.read(iprot);
                  struct.playerExtendConfig.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setPlayerExtendConfigIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MATCH_EXTEND_CONFIG
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list12 = iprot.readListBegin();
                struct.matchExtendConfig = new ArrayList<TOlympicConfig>(_list12.size);
                TOlympicConfig _elem13;
                for (int _i14 = 0; _i14 < _list12.size; ++_i14)
                {
                  _elem13 = new TOlympicConfig();
                  _elem13.read(iprot);
                  struct.matchExtendConfig.add(_elem13);
                }
                iprot.readListEnd();
              }
              struct.setMatchExtendConfigIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // RESULT_CONFIG
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list15 = iprot.readListBegin();
                struct.resultConfig = new ArrayList<TOlympicConfig>(_list15.size);
                TOlympicConfig _elem16;
                for (int _i17 = 0; _i17 < _list15.size; ++_i17)
                {
                  _elem16 = new TOlympicConfig();
                  _elem16.read(iprot);
                  struct.resultConfig.add(_elem16);
                }
                iprot.readListEnd();
              }
              struct.setResultConfigIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TOlympicLiveConfigSet struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.competitorStatsConfig != null) {
        if (struct.isSetCompetitorStatsConfig()) {
          oprot.writeFieldBegin(COMPETITOR_STATS_CONFIG_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.competitorStatsConfig.size()));
            for (TOlympicConfig _iter18 : struct.competitorStatsConfig)
            {
              _iter18.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.playerStatsConfig != null) {
        if (struct.isSetPlayerStatsConfig()) {
          oprot.writeFieldBegin(PLAYER_STATS_CONFIG_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.playerStatsConfig.size()));
            for (TOlympicConfig _iter19 : struct.playerStatsConfig)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.teamExtendConfig != null) {
        if (struct.isSetTeamExtendConfig()) {
          oprot.writeFieldBegin(TEAM_EXTEND_CONFIG_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.teamExtendConfig.size()));
            for (TOlympicConfig _iter20 : struct.teamExtendConfig)
            {
              _iter20.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.playerExtendConfig != null) {
        if (struct.isSetPlayerExtendConfig()) {
          oprot.writeFieldBegin(PLAYER_EXTEND_CONFIG_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.playerExtendConfig.size()));
            for (TOlympicConfig _iter21 : struct.playerExtendConfig)
            {
              _iter21.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.matchExtendConfig != null) {
        if (struct.isSetMatchExtendConfig()) {
          oprot.writeFieldBegin(MATCH_EXTEND_CONFIG_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.matchExtendConfig.size()));
            for (TOlympicConfig _iter22 : struct.matchExtendConfig)
            {
              _iter22.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.resultConfig != null) {
        if (struct.isSetResultConfig()) {
          oprot.writeFieldBegin(RESULT_CONFIG_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.resultConfig.size()));
            for (TOlympicConfig _iter23 : struct.resultConfig)
            {
              _iter23.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TOlympicLiveConfigSetTupleSchemeFactory implements SchemeFactory {
    public TOlympicLiveConfigSetTupleScheme getScheme() {
      return new TOlympicLiveConfigSetTupleScheme();
    }
  }

  private static class TOlympicLiveConfigSetTupleScheme extends TupleScheme<TOlympicLiveConfigSet> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TOlympicLiveConfigSet struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetCompetitorStatsConfig()) {
        optionals.set(1);
      }
      if (struct.isSetPlayerStatsConfig()) {
        optionals.set(2);
      }
      if (struct.isSetTeamExtendConfig()) {
        optionals.set(3);
      }
      if (struct.isSetPlayerExtendConfig()) {
        optionals.set(4);
      }
      if (struct.isSetMatchExtendConfig()) {
        optionals.set(5);
      }
      if (struct.isSetResultConfig()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetCompetitorStatsConfig()) {
        {
          oprot.writeI32(struct.competitorStatsConfig.size());
          for (TOlympicConfig _iter24 : struct.competitorStatsConfig)
          {
            _iter24.write(oprot);
          }
        }
      }
      if (struct.isSetPlayerStatsConfig()) {
        {
          oprot.writeI32(struct.playerStatsConfig.size());
          for (TOlympicConfig _iter25 : struct.playerStatsConfig)
          {
            _iter25.write(oprot);
          }
        }
      }
      if (struct.isSetTeamExtendConfig()) {
        {
          oprot.writeI32(struct.teamExtendConfig.size());
          for (TOlympicConfig _iter26 : struct.teamExtendConfig)
          {
            _iter26.write(oprot);
          }
        }
      }
      if (struct.isSetPlayerExtendConfig()) {
        {
          oprot.writeI32(struct.playerExtendConfig.size());
          for (TOlympicConfig _iter27 : struct.playerExtendConfig)
          {
            _iter27.write(oprot);
          }
        }
      }
      if (struct.isSetMatchExtendConfig()) {
        {
          oprot.writeI32(struct.matchExtendConfig.size());
          for (TOlympicConfig _iter28 : struct.matchExtendConfig)
          {
            _iter28.write(oprot);
          }
        }
      }
      if (struct.isSetResultConfig()) {
        {
          oprot.writeI32(struct.resultConfig.size());
          for (TOlympicConfig _iter29 : struct.resultConfig)
          {
            _iter29.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TOlympicLiveConfigSet struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list30 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.competitorStatsConfig = new ArrayList<TOlympicConfig>(_list30.size);
          TOlympicConfig _elem31;
          for (int _i32 = 0; _i32 < _list30.size; ++_i32)
          {
            _elem31 = new TOlympicConfig();
            _elem31.read(iprot);
            struct.competitorStatsConfig.add(_elem31);
          }
        }
        struct.setCompetitorStatsConfigIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list33 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.playerStatsConfig = new ArrayList<TOlympicConfig>(_list33.size);
          TOlympicConfig _elem34;
          for (int _i35 = 0; _i35 < _list33.size; ++_i35)
          {
            _elem34 = new TOlympicConfig();
            _elem34.read(iprot);
            struct.playerStatsConfig.add(_elem34);
          }
        }
        struct.setPlayerStatsConfigIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list36 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.teamExtendConfig = new ArrayList<TOlympicConfig>(_list36.size);
          TOlympicConfig _elem37;
          for (int _i38 = 0; _i38 < _list36.size; ++_i38)
          {
            _elem37 = new TOlympicConfig();
            _elem37.read(iprot);
            struct.teamExtendConfig.add(_elem37);
          }
        }
        struct.setTeamExtendConfigIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list39 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.playerExtendConfig = new ArrayList<TOlympicConfig>(_list39.size);
          TOlympicConfig _elem40;
          for (int _i41 = 0; _i41 < _list39.size; ++_i41)
          {
            _elem40 = new TOlympicConfig();
            _elem40.read(iprot);
            struct.playerExtendConfig.add(_elem40);
          }
        }
        struct.setPlayerExtendConfigIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list42 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.matchExtendConfig = new ArrayList<TOlympicConfig>(_list42.size);
          TOlympicConfig _elem43;
          for (int _i44 = 0; _i44 < _list42.size; ++_i44)
          {
            _elem43 = new TOlympicConfig();
            _elem43.read(iprot);
            struct.matchExtendConfig.add(_elem43);
          }
        }
        struct.setMatchExtendConfigIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.resultConfig = new ArrayList<TOlympicConfig>(_list45.size);
          TOlympicConfig _elem46;
          for (int _i47 = 0; _i47 < _list45.size; ++_i47)
          {
            _elem46 = new TOlympicConfig();
            _elem46.read(iprot);
            struct.resultConfig.add(_elem46);
          }
        }
        struct.setResultConfigIsSet(true);
      }
    }
  }

}

