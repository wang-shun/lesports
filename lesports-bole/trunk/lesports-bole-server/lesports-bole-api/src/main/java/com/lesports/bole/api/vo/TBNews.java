/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lesports.bole.api.vo;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 新闻信息
 * 
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-7-5")
public class TBNews implements org.apache.thrift.TBase<TBNews, TBNews._Fields>, java.io.Serializable, Cloneable, Comparable<TBNews> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TBNews");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PUBLISH_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("publishAt", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PARAGRAPHS_FIELD_DESC = new org.apache.thrift.protocol.TField("paragraphs", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField IMAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("images", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField COMMENT_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("commentCount", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("tags", org.apache.thrift.protocol.TType.SET, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TBNewsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TBNewsTupleSchemeFactory());
  }

  private long id; // required
  private String title; // optional
  private String publishAt; // optional
  private List<TBParagraph> paragraphs; // optional
  private List<TBImage> images; // optional
  private int commentCount; // optional
  private Set<String> tags; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    TITLE((short)2, "title"),
    PUBLISH_AT((short)3, "publishAt"),
    PARAGRAPHS((short)4, "paragraphs"),
    IMAGES((short)5, "images"),
    COMMENT_COUNT((short)6, "commentCount"),
    TAGS((short)7, "tags");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // TITLE
          return TITLE;
        case 3: // PUBLISH_AT
          return PUBLISH_AT;
        case 4: // PARAGRAPHS
          return PARAGRAPHS;
        case 5: // IMAGES
          return IMAGES;
        case 6: // COMMENT_COUNT
          return COMMENT_COUNT;
        case 7: // TAGS
          return TAGS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __COMMENTCOUNT_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TITLE,_Fields.PUBLISH_AT,_Fields.PARAGRAPHS,_Fields.IMAGES,_Fields.COMMENT_COUNT,_Fields.TAGS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PUBLISH_AT, new org.apache.thrift.meta_data.FieldMetaData("publishAt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARAGRAPHS, new org.apache.thrift.meta_data.FieldMetaData("paragraphs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TBParagraph.class))));
    tmpMap.put(_Fields.IMAGES, new org.apache.thrift.meta_data.FieldMetaData("images", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TBImage.class))));
    tmpMap.put(_Fields.COMMENT_COUNT, new org.apache.thrift.meta_data.FieldMetaData("commentCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TAGS, new org.apache.thrift.meta_data.FieldMetaData("tags", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TBNews.class, metaDataMap);
  }

  public TBNews() {
  }

  public TBNews(
    long id)
  {
    this();
    this.id = id;
    setIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TBNews(TBNews other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetPublishAt()) {
      this.publishAt = other.publishAt;
    }
    if (other.isSetParagraphs()) {
      List<TBParagraph> __this__paragraphs = new ArrayList<TBParagraph>(other.paragraphs.size());
      for (TBParagraph other_element : other.paragraphs) {
        __this__paragraphs.add(new TBParagraph(other_element));
      }
      this.paragraphs = __this__paragraphs;
    }
    if (other.isSetImages()) {
      List<TBImage> __this__images = new ArrayList<TBImage>(other.images.size());
      for (TBImage other_element : other.images) {
        __this__images.add(new TBImage(other_element));
      }
      this.images = __this__images;
    }
    this.commentCount = other.commentCount;
    if (other.isSetTags()) {
      Set<String> __this__tags = new HashSet<String>(other.tags);
      this.tags = __this__tags;
    }
  }

  public TBNews deepCopy() {
    return new TBNews(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.title = null;
    this.publishAt = null;
    this.paragraphs = null;
    this.images = null;
    setCommentCountIsSet(false);
    this.commentCount = 0;
    this.tags = null;
  }

  public long getId() {
    return this.id;
  }

  public void setId(long id) {
    this.id = id;
    setIdIsSet(true);
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getTitle() {
    return this.title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public String getPublishAt() {
    return this.publishAt;
  }

  public void setPublishAt(String publishAt) {
    this.publishAt = publishAt;
  }

  public void unsetPublishAt() {
    this.publishAt = null;
  }

  /** Returns true if field publishAt is set (has been assigned a value) and false otherwise */
  public boolean isSetPublishAt() {
    return this.publishAt != null;
  }

  public void setPublishAtIsSet(boolean value) {
    if (!value) {
      this.publishAt = null;
    }
  }

  public int getParagraphsSize() {
    return (this.paragraphs == null) ? 0 : this.paragraphs.size();
  }

  public java.util.Iterator<TBParagraph> getParagraphsIterator() {
    return (this.paragraphs == null) ? null : this.paragraphs.iterator();
  }

  public void addToParagraphs(TBParagraph elem) {
    if (this.paragraphs == null) {
      this.paragraphs = new ArrayList<TBParagraph>();
    }
    this.paragraphs.add(elem);
  }

  public List<TBParagraph> getParagraphs() {
    return this.paragraphs;
  }

  public void setParagraphs(List<TBParagraph> paragraphs) {
    this.paragraphs = paragraphs;
  }

  public void unsetParagraphs() {
    this.paragraphs = null;
  }

  /** Returns true if field paragraphs is set (has been assigned a value) and false otherwise */
  public boolean isSetParagraphs() {
    return this.paragraphs != null;
  }

  public void setParagraphsIsSet(boolean value) {
    if (!value) {
      this.paragraphs = null;
    }
  }

  public int getImagesSize() {
    return (this.images == null) ? 0 : this.images.size();
  }

  public java.util.Iterator<TBImage> getImagesIterator() {
    return (this.images == null) ? null : this.images.iterator();
  }

  public void addToImages(TBImage elem) {
    if (this.images == null) {
      this.images = new ArrayList<TBImage>();
    }
    this.images.add(elem);
  }

  public List<TBImage> getImages() {
    return this.images;
  }

  public void setImages(List<TBImage> images) {
    this.images = images;
  }

  public void unsetImages() {
    this.images = null;
  }

  /** Returns true if field images is set (has been assigned a value) and false otherwise */
  public boolean isSetImages() {
    return this.images != null;
  }

  public void setImagesIsSet(boolean value) {
    if (!value) {
      this.images = null;
    }
  }

  public int getCommentCount() {
    return this.commentCount;
  }

  public void setCommentCount(int commentCount) {
    this.commentCount = commentCount;
    setCommentCountIsSet(true);
  }

  public void unsetCommentCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMMENTCOUNT_ISSET_ID);
  }

  /** Returns true if field commentCount is set (has been assigned a value) and false otherwise */
  public boolean isSetCommentCount() {
    return EncodingUtils.testBit(__isset_bitfield, __COMMENTCOUNT_ISSET_ID);
  }

  public void setCommentCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMMENTCOUNT_ISSET_ID, value);
  }

  public int getTagsSize() {
    return (this.tags == null) ? 0 : this.tags.size();
  }

  public java.util.Iterator<String> getTagsIterator() {
    return (this.tags == null) ? null : this.tags.iterator();
  }

  public void addToTags(String elem) {
    if (this.tags == null) {
      this.tags = new HashSet<String>();
    }
    this.tags.add(elem);
  }

  public Set<String> getTags() {
    return this.tags;
  }

  public void setTags(Set<String> tags) {
    this.tags = tags;
  }

  public void unsetTags() {
    this.tags = null;
  }

  /** Returns true if field tags is set (has been assigned a value) and false otherwise */
  public boolean isSetTags() {
    return this.tags != null;
  }

  public void setTagsIsSet(boolean value) {
    if (!value) {
      this.tags = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case PUBLISH_AT:
      if (value == null) {
        unsetPublishAt();
      } else {
        setPublishAt((String)value);
      }
      break;

    case PARAGRAPHS:
      if (value == null) {
        unsetParagraphs();
      } else {
        setParagraphs((List<TBParagraph>)value);
      }
      break;

    case IMAGES:
      if (value == null) {
        unsetImages();
      } else {
        setImages((List<TBImage>)value);
      }
      break;

    case COMMENT_COUNT:
      if (value == null) {
        unsetCommentCount();
      } else {
        setCommentCount((Integer)value);
      }
      break;

    case TAGS:
      if (value == null) {
        unsetTags();
      } else {
        setTags((Set<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case TITLE:
      return getTitle();

    case PUBLISH_AT:
      return getPublishAt();

    case PARAGRAPHS:
      return getParagraphs();

    case IMAGES:
      return getImages();

    case COMMENT_COUNT:
      return Integer.valueOf(getCommentCount());

    case TAGS:
      return getTags();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case TITLE:
      return isSetTitle();
    case PUBLISH_AT:
      return isSetPublishAt();
    case PARAGRAPHS:
      return isSetParagraphs();
    case IMAGES:
      return isSetImages();
    case COMMENT_COUNT:
      return isSetCommentCount();
    case TAGS:
      return isSetTags();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TBNews)
      return this.equals((TBNews)that);
    return false;
  }

  public boolean equals(TBNews that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_publishAt = true && this.isSetPublishAt();
    boolean that_present_publishAt = true && that.isSetPublishAt();
    if (this_present_publishAt || that_present_publishAt) {
      if (!(this_present_publishAt && that_present_publishAt))
        return false;
      if (!this.publishAt.equals(that.publishAt))
        return false;
    }

    boolean this_present_paragraphs = true && this.isSetParagraphs();
    boolean that_present_paragraphs = true && that.isSetParagraphs();
    if (this_present_paragraphs || that_present_paragraphs) {
      if (!(this_present_paragraphs && that_present_paragraphs))
        return false;
      if (!this.paragraphs.equals(that.paragraphs))
        return false;
    }

    boolean this_present_images = true && this.isSetImages();
    boolean that_present_images = true && that.isSetImages();
    if (this_present_images || that_present_images) {
      if (!(this_present_images && that_present_images))
        return false;
      if (!this.images.equals(that.images))
        return false;
    }

    boolean this_present_commentCount = true && this.isSetCommentCount();
    boolean that_present_commentCount = true && that.isSetCommentCount();
    if (this_present_commentCount || that_present_commentCount) {
      if (!(this_present_commentCount && that_present_commentCount))
        return false;
      if (this.commentCount != that.commentCount)
        return false;
    }

    boolean this_present_tags = true && this.isSetTags();
    boolean that_present_tags = true && that.isSetTags();
    if (this_present_tags || that_present_tags) {
      if (!(this_present_tags && that_present_tags))
        return false;
      if (!this.tags.equals(that.tags))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_title = true && (isSetTitle());
    list.add(present_title);
    if (present_title)
      list.add(title);

    boolean present_publishAt = true && (isSetPublishAt());
    list.add(present_publishAt);
    if (present_publishAt)
      list.add(publishAt);

    boolean present_paragraphs = true && (isSetParagraphs());
    list.add(present_paragraphs);
    if (present_paragraphs)
      list.add(paragraphs);

    boolean present_images = true && (isSetImages());
    list.add(present_images);
    if (present_images)
      list.add(images);

    boolean present_commentCount = true && (isSetCommentCount());
    list.add(present_commentCount);
    if (present_commentCount)
      list.add(commentCount);

    boolean present_tags = true && (isSetTags());
    list.add(present_tags);
    if (present_tags)
      list.add(tags);

    return list.hashCode();
  }

  @Override
  public int compareTo(TBNews other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPublishAt()).compareTo(other.isSetPublishAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublishAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publishAt, other.publishAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParagraphs()).compareTo(other.isSetParagraphs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParagraphs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paragraphs, other.paragraphs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImages()).compareTo(other.isSetImages());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImages()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.images, other.images);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommentCount()).compareTo(other.isSetCommentCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommentCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commentCount, other.commentCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTags()).compareTo(other.isSetTags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tags, other.tags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TBNews(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (isSetTitle()) {
      if (!first) sb.append(", ");
      sb.append("title:");
      if (this.title == null) {
        sb.append("null");
      } else {
        sb.append(this.title);
      }
      first = false;
    }
    if (isSetPublishAt()) {
      if (!first) sb.append(", ");
      sb.append("publishAt:");
      if (this.publishAt == null) {
        sb.append("null");
      } else {
        sb.append(this.publishAt);
      }
      first = false;
    }
    if (isSetParagraphs()) {
      if (!first) sb.append(", ");
      sb.append("paragraphs:");
      if (this.paragraphs == null) {
        sb.append("null");
      } else {
        sb.append(this.paragraphs);
      }
      first = false;
    }
    if (isSetImages()) {
      if (!first) sb.append(", ");
      sb.append("images:");
      if (this.images == null) {
        sb.append("null");
      } else {
        sb.append(this.images);
      }
      first = false;
    }
    if (isSetCommentCount()) {
      if (!first) sb.append(", ");
      sb.append("commentCount:");
      sb.append(this.commentCount);
      first = false;
    }
    if (isSetTags()) {
      if (!first) sb.append(", ");
      sb.append("tags:");
      if (this.tags == null) {
        sb.append("null");
      } else {
        sb.append(this.tags);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TBNewsStandardSchemeFactory implements SchemeFactory {
    public TBNewsStandardScheme getScheme() {
      return new TBNewsStandardScheme();
    }
  }

  private static class TBNewsStandardScheme extends StandardScheme<TBNews> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TBNews struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PUBLISH_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.publishAt = iprot.readString();
              struct.setPublishAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PARAGRAPHS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.paragraphs = new ArrayList<TBParagraph>(_list0.size);
                TBParagraph _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new TBParagraph();
                  _elem1.read(iprot);
                  struct.paragraphs.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setParagraphsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IMAGES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.images = new ArrayList<TBImage>(_list3.size);
                TBImage _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = new TBImage();
                  _elem4.read(iprot);
                  struct.images.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setImagesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COMMENT_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.commentCount = iprot.readI32();
              struct.setCommentCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set6 = iprot.readSetBegin();
                struct.tags = new HashSet<String>(2*_set6.size);
                String _elem7;
                for (int _i8 = 0; _i8 < _set6.size; ++_i8)
                {
                  _elem7 = iprot.readString();
                  struct.tags.add(_elem7);
                }
                iprot.readSetEnd();
              }
              struct.setTagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TBNews struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.title != null) {
        if (struct.isSetTitle()) {
          oprot.writeFieldBegin(TITLE_FIELD_DESC);
          oprot.writeString(struct.title);
          oprot.writeFieldEnd();
        }
      }
      if (struct.publishAt != null) {
        if (struct.isSetPublishAt()) {
          oprot.writeFieldBegin(PUBLISH_AT_FIELD_DESC);
          oprot.writeString(struct.publishAt);
          oprot.writeFieldEnd();
        }
      }
      if (struct.paragraphs != null) {
        if (struct.isSetParagraphs()) {
          oprot.writeFieldBegin(PARAGRAPHS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.paragraphs.size()));
            for (TBParagraph _iter9 : struct.paragraphs)
            {
              _iter9.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.images != null) {
        if (struct.isSetImages()) {
          oprot.writeFieldBegin(IMAGES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.images.size()));
            for (TBImage _iter10 : struct.images)
            {
              _iter10.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCommentCount()) {
        oprot.writeFieldBegin(COMMENT_COUNT_FIELD_DESC);
        oprot.writeI32(struct.commentCount);
        oprot.writeFieldEnd();
      }
      if (struct.tags != null) {
        if (struct.isSetTags()) {
          oprot.writeFieldBegin(TAGS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.tags.size()));
            for (String _iter11 : struct.tags)
            {
              oprot.writeString(_iter11);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TBNewsTupleSchemeFactory implements SchemeFactory {
    public TBNewsTupleScheme getScheme() {
      return new TBNewsTupleScheme();
    }
  }

  private static class TBNewsTupleScheme extends TupleScheme<TBNews> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TBNews struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetTitle()) {
        optionals.set(1);
      }
      if (struct.isSetPublishAt()) {
        optionals.set(2);
      }
      if (struct.isSetParagraphs()) {
        optionals.set(3);
      }
      if (struct.isSetImages()) {
        optionals.set(4);
      }
      if (struct.isSetCommentCount()) {
        optionals.set(5);
      }
      if (struct.isSetTags()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetPublishAt()) {
        oprot.writeString(struct.publishAt);
      }
      if (struct.isSetParagraphs()) {
        {
          oprot.writeI32(struct.paragraphs.size());
          for (TBParagraph _iter12 : struct.paragraphs)
          {
            _iter12.write(oprot);
          }
        }
      }
      if (struct.isSetImages()) {
        {
          oprot.writeI32(struct.images.size());
          for (TBImage _iter13 : struct.images)
          {
            _iter13.write(oprot);
          }
        }
      }
      if (struct.isSetCommentCount()) {
        oprot.writeI32(struct.commentCount);
      }
      if (struct.isSetTags()) {
        {
          oprot.writeI32(struct.tags.size());
          for (String _iter14 : struct.tags)
          {
            oprot.writeString(_iter14);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TBNews struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(2)) {
        struct.publishAt = iprot.readString();
        struct.setPublishAtIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.paragraphs = new ArrayList<TBParagraph>(_list15.size);
          TBParagraph _elem16;
          for (int _i17 = 0; _i17 < _list15.size; ++_i17)
          {
            _elem16 = new TBParagraph();
            _elem16.read(iprot);
            struct.paragraphs.add(_elem16);
          }
        }
        struct.setParagraphsIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list18 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.images = new ArrayList<TBImage>(_list18.size);
          TBImage _elem19;
          for (int _i20 = 0; _i20 < _list18.size; ++_i20)
          {
            _elem19 = new TBImage();
            _elem19.read(iprot);
            struct.images.add(_elem19);
          }
        }
        struct.setImagesIsSet(true);
      }
      if (incoming.get(5)) {
        struct.commentCount = iprot.readI32();
        struct.setCommentCountIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TSet _set21 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.tags = new HashSet<String>(2*_set21.size);
          String _elem22;
          for (int _i23 = 0; _i23 < _set21.size; ++_i23)
          {
            _elem22 = iprot.readString();
            struct.tags.add(_elem22);
          }
        }
        struct.setTagsIsSet(true);
      }
    }
  }

}

