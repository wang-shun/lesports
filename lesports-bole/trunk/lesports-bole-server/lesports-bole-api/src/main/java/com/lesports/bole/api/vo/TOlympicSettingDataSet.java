/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lesports.bole.api.vo;

import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-7-5")
public class TOlympicSettingDataSet implements org.apache.thrift.TBase<TOlympicSettingDataSet, TOlympicSettingDataSet._Fields>, java.io.Serializable, Cloneable, Comparable<TOlympicSettingDataSet> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TOlympicSettingDataSet");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField COMPETITOR_STATS_CONDITION_CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("competitorStatsConditionConfig", org.apache.thrift.protocol.TType.SET, (short)2);
  private static final org.apache.thrift.protocol.TField COMPETITOR_STATS_CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("competitorStatsConfig", org.apache.thrift.protocol.TType.SET, (short)3);
  private static final org.apache.thrift.protocol.TField PLAYER_STATS_CONDITION_CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("playerStatsConditionConfig", org.apache.thrift.protocol.TType.SET, (short)4);
  private static final org.apache.thrift.protocol.TField PLAYER_STATS_CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("playerStatsConfig", org.apache.thrift.protocol.TType.SET, (short)5);
  private static final org.apache.thrift.protocol.TField TEAM_EXTEND_CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("teamExtendConfig", org.apache.thrift.protocol.TType.SET, (short)6);
  private static final org.apache.thrift.protocol.TField PLAYER_EXTEND_CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("playerExtendConfig", org.apache.thrift.protocol.TType.SET, (short)7);
  private static final org.apache.thrift.protocol.TField MATCH_EXTEND_CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("matchExtendConfig", org.apache.thrift.protocol.TType.SET, (short)8);
  private static final org.apache.thrift.protocol.TField RESULT_CONDITION_CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("resultConditionConfig", org.apache.thrift.protocol.TType.SET, (short)9);
  private static final org.apache.thrift.protocol.TField RESULT_CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("resultConfig", org.apache.thrift.protocol.TType.SET, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TOlympicSettingDataSetStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TOlympicSettingDataSetTupleSchemeFactory());
  }

  private String id; // required
  private Set<String> competitorStatsConditionConfig; // optional
  private Set<String> competitorStatsConfig; // optional
  private Set<String> playerStatsConditionConfig; // optional
  private Set<String> playerStatsConfig; // optional
  private Set<String> teamExtendConfig; // optional
  private Set<String> playerExtendConfig; // optional
  private Set<String> matchExtendConfig; // optional
  private Set<String> resultConditionConfig; // optional
  private Set<String> resultConfig; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    COMPETITOR_STATS_CONDITION_CONFIG((short)2, "competitorStatsConditionConfig"),
    COMPETITOR_STATS_CONFIG((short)3, "competitorStatsConfig"),
    PLAYER_STATS_CONDITION_CONFIG((short)4, "playerStatsConditionConfig"),
    PLAYER_STATS_CONFIG((short)5, "playerStatsConfig"),
    TEAM_EXTEND_CONFIG((short)6, "teamExtendConfig"),
    PLAYER_EXTEND_CONFIG((short)7, "playerExtendConfig"),
    MATCH_EXTEND_CONFIG((short)8, "matchExtendConfig"),
    RESULT_CONDITION_CONFIG((short)9, "resultConditionConfig"),
    RESULT_CONFIG((short)10, "resultConfig");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // COMPETITOR_STATS_CONDITION_CONFIG
          return COMPETITOR_STATS_CONDITION_CONFIG;
        case 3: // COMPETITOR_STATS_CONFIG
          return COMPETITOR_STATS_CONFIG;
        case 4: // PLAYER_STATS_CONDITION_CONFIG
          return PLAYER_STATS_CONDITION_CONFIG;
        case 5: // PLAYER_STATS_CONFIG
          return PLAYER_STATS_CONFIG;
        case 6: // TEAM_EXTEND_CONFIG
          return TEAM_EXTEND_CONFIG;
        case 7: // PLAYER_EXTEND_CONFIG
          return PLAYER_EXTEND_CONFIG;
        case 8: // MATCH_EXTEND_CONFIG
          return MATCH_EXTEND_CONFIG;
        case 9: // RESULT_CONDITION_CONFIG
          return RESULT_CONDITION_CONFIG;
        case 10: // RESULT_CONFIG
          return RESULT_CONFIG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.COMPETITOR_STATS_CONDITION_CONFIG,_Fields.COMPETITOR_STATS_CONFIG,_Fields.PLAYER_STATS_CONDITION_CONFIG,_Fields.PLAYER_STATS_CONFIG,_Fields.TEAM_EXTEND_CONFIG,_Fields.PLAYER_EXTEND_CONFIG,_Fields.MATCH_EXTEND_CONFIG,_Fields.RESULT_CONDITION_CONFIG,_Fields.RESULT_CONFIG};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPETITOR_STATS_CONDITION_CONFIG, new org.apache.thrift.meta_data.FieldMetaData("competitorStatsConditionConfig", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.COMPETITOR_STATS_CONFIG, new org.apache.thrift.meta_data.FieldMetaData("competitorStatsConfig", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.PLAYER_STATS_CONDITION_CONFIG, new org.apache.thrift.meta_data.FieldMetaData("playerStatsConditionConfig", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.PLAYER_STATS_CONFIG, new org.apache.thrift.meta_data.FieldMetaData("playerStatsConfig", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.TEAM_EXTEND_CONFIG, new org.apache.thrift.meta_data.FieldMetaData("teamExtendConfig", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.PLAYER_EXTEND_CONFIG, new org.apache.thrift.meta_data.FieldMetaData("playerExtendConfig", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.MATCH_EXTEND_CONFIG, new org.apache.thrift.meta_data.FieldMetaData("matchExtendConfig", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.RESULT_CONDITION_CONFIG, new org.apache.thrift.meta_data.FieldMetaData("resultConditionConfig", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.RESULT_CONFIG, new org.apache.thrift.meta_data.FieldMetaData("resultConfig", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TOlympicSettingDataSet.class, metaDataMap);
  }

  public TOlympicSettingDataSet() {
  }

  public TOlympicSettingDataSet(
    String id)
  {
    this();
    this.id = id;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TOlympicSettingDataSet(TOlympicSettingDataSet other) {
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetCompetitorStatsConditionConfig()) {
      Set<String> __this__competitorStatsConditionConfig = new HashSet<String>(other.competitorStatsConditionConfig);
      this.competitorStatsConditionConfig = __this__competitorStatsConditionConfig;
    }
    if (other.isSetCompetitorStatsConfig()) {
      Set<String> __this__competitorStatsConfig = new HashSet<String>(other.competitorStatsConfig);
      this.competitorStatsConfig = __this__competitorStatsConfig;
    }
    if (other.isSetPlayerStatsConditionConfig()) {
      Set<String> __this__playerStatsConditionConfig = new HashSet<String>(other.playerStatsConditionConfig);
      this.playerStatsConditionConfig = __this__playerStatsConditionConfig;
    }
    if (other.isSetPlayerStatsConfig()) {
      Set<String> __this__playerStatsConfig = new HashSet<String>(other.playerStatsConfig);
      this.playerStatsConfig = __this__playerStatsConfig;
    }
    if (other.isSetTeamExtendConfig()) {
      Set<String> __this__teamExtendConfig = new HashSet<String>(other.teamExtendConfig);
      this.teamExtendConfig = __this__teamExtendConfig;
    }
    if (other.isSetPlayerExtendConfig()) {
      Set<String> __this__playerExtendConfig = new HashSet<String>(other.playerExtendConfig);
      this.playerExtendConfig = __this__playerExtendConfig;
    }
    if (other.isSetMatchExtendConfig()) {
      Set<String> __this__matchExtendConfig = new HashSet<String>(other.matchExtendConfig);
      this.matchExtendConfig = __this__matchExtendConfig;
    }
    if (other.isSetResultConditionConfig()) {
      Set<String> __this__resultConditionConfig = new HashSet<String>(other.resultConditionConfig);
      this.resultConditionConfig = __this__resultConditionConfig;
    }
    if (other.isSetResultConfig()) {
      Set<String> __this__resultConfig = new HashSet<String>(other.resultConfig);
      this.resultConfig = __this__resultConfig;
    }
  }

  public TOlympicSettingDataSet deepCopy() {
    return new TOlympicSettingDataSet(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.competitorStatsConditionConfig = null;
    this.competitorStatsConfig = null;
    this.playerStatsConditionConfig = null;
    this.playerStatsConfig = null;
    this.teamExtendConfig = null;
    this.playerExtendConfig = null;
    this.matchExtendConfig = null;
    this.resultConditionConfig = null;
    this.resultConfig = null;
  }

  public String getId() {
    return this.id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public int getCompetitorStatsConditionConfigSize() {
    return (this.competitorStatsConditionConfig == null) ? 0 : this.competitorStatsConditionConfig.size();
  }

  public java.util.Iterator<String> getCompetitorStatsConditionConfigIterator() {
    return (this.competitorStatsConditionConfig == null) ? null : this.competitorStatsConditionConfig.iterator();
  }

  public void addToCompetitorStatsConditionConfig(String elem) {
    if (this.competitorStatsConditionConfig == null) {
      this.competitorStatsConditionConfig = new HashSet<String>();
    }
    this.competitorStatsConditionConfig.add(elem);
  }

  public Set<String> getCompetitorStatsConditionConfig() {
    return this.competitorStatsConditionConfig;
  }

  public void setCompetitorStatsConditionConfig(Set<String> competitorStatsConditionConfig) {
    this.competitorStatsConditionConfig = competitorStatsConditionConfig;
  }

  public void unsetCompetitorStatsConditionConfig() {
    this.competitorStatsConditionConfig = null;
  }

  /** Returns true if field competitorStatsConditionConfig is set (has been assigned a value) and false otherwise */
  public boolean isSetCompetitorStatsConditionConfig() {
    return this.competitorStatsConditionConfig != null;
  }

  public void setCompetitorStatsConditionConfigIsSet(boolean value) {
    if (!value) {
      this.competitorStatsConditionConfig = null;
    }
  }

  public int getCompetitorStatsConfigSize() {
    return (this.competitorStatsConfig == null) ? 0 : this.competitorStatsConfig.size();
  }

  public java.util.Iterator<String> getCompetitorStatsConfigIterator() {
    return (this.competitorStatsConfig == null) ? null : this.competitorStatsConfig.iterator();
  }

  public void addToCompetitorStatsConfig(String elem) {
    if (this.competitorStatsConfig == null) {
      this.competitorStatsConfig = new HashSet<String>();
    }
    this.competitorStatsConfig.add(elem);
  }

  public Set<String> getCompetitorStatsConfig() {
    return this.competitorStatsConfig;
  }

  public void setCompetitorStatsConfig(Set<String> competitorStatsConfig) {
    this.competitorStatsConfig = competitorStatsConfig;
  }

  public void unsetCompetitorStatsConfig() {
    this.competitorStatsConfig = null;
  }

  /** Returns true if field competitorStatsConfig is set (has been assigned a value) and false otherwise */
  public boolean isSetCompetitorStatsConfig() {
    return this.competitorStatsConfig != null;
  }

  public void setCompetitorStatsConfigIsSet(boolean value) {
    if (!value) {
      this.competitorStatsConfig = null;
    }
  }

  public int getPlayerStatsConditionConfigSize() {
    return (this.playerStatsConditionConfig == null) ? 0 : this.playerStatsConditionConfig.size();
  }

  public java.util.Iterator<String> getPlayerStatsConditionConfigIterator() {
    return (this.playerStatsConditionConfig == null) ? null : this.playerStatsConditionConfig.iterator();
  }

  public void addToPlayerStatsConditionConfig(String elem) {
    if (this.playerStatsConditionConfig == null) {
      this.playerStatsConditionConfig = new HashSet<String>();
    }
    this.playerStatsConditionConfig.add(elem);
  }

  public Set<String> getPlayerStatsConditionConfig() {
    return this.playerStatsConditionConfig;
  }

  public void setPlayerStatsConditionConfig(Set<String> playerStatsConditionConfig) {
    this.playerStatsConditionConfig = playerStatsConditionConfig;
  }

  public void unsetPlayerStatsConditionConfig() {
    this.playerStatsConditionConfig = null;
  }

  /** Returns true if field playerStatsConditionConfig is set (has been assigned a value) and false otherwise */
  public boolean isSetPlayerStatsConditionConfig() {
    return this.playerStatsConditionConfig != null;
  }

  public void setPlayerStatsConditionConfigIsSet(boolean value) {
    if (!value) {
      this.playerStatsConditionConfig = null;
    }
  }

  public int getPlayerStatsConfigSize() {
    return (this.playerStatsConfig == null) ? 0 : this.playerStatsConfig.size();
  }

  public java.util.Iterator<String> getPlayerStatsConfigIterator() {
    return (this.playerStatsConfig == null) ? null : this.playerStatsConfig.iterator();
  }

  public void addToPlayerStatsConfig(String elem) {
    if (this.playerStatsConfig == null) {
      this.playerStatsConfig = new HashSet<String>();
    }
    this.playerStatsConfig.add(elem);
  }

  public Set<String> getPlayerStatsConfig() {
    return this.playerStatsConfig;
  }

  public void setPlayerStatsConfig(Set<String> playerStatsConfig) {
    this.playerStatsConfig = playerStatsConfig;
  }

  public void unsetPlayerStatsConfig() {
    this.playerStatsConfig = null;
  }

  /** Returns true if field playerStatsConfig is set (has been assigned a value) and false otherwise */
  public boolean isSetPlayerStatsConfig() {
    return this.playerStatsConfig != null;
  }

  public void setPlayerStatsConfigIsSet(boolean value) {
    if (!value) {
      this.playerStatsConfig = null;
    }
  }

  public int getTeamExtendConfigSize() {
    return (this.teamExtendConfig == null) ? 0 : this.teamExtendConfig.size();
  }

  public java.util.Iterator<String> getTeamExtendConfigIterator() {
    return (this.teamExtendConfig == null) ? null : this.teamExtendConfig.iterator();
  }

  public void addToTeamExtendConfig(String elem) {
    if (this.teamExtendConfig == null) {
      this.teamExtendConfig = new HashSet<String>();
    }
    this.teamExtendConfig.add(elem);
  }

  public Set<String> getTeamExtendConfig() {
    return this.teamExtendConfig;
  }

  public void setTeamExtendConfig(Set<String> teamExtendConfig) {
    this.teamExtendConfig = teamExtendConfig;
  }

  public void unsetTeamExtendConfig() {
    this.teamExtendConfig = null;
  }

  /** Returns true if field teamExtendConfig is set (has been assigned a value) and false otherwise */
  public boolean isSetTeamExtendConfig() {
    return this.teamExtendConfig != null;
  }

  public void setTeamExtendConfigIsSet(boolean value) {
    if (!value) {
      this.teamExtendConfig = null;
    }
  }

  public int getPlayerExtendConfigSize() {
    return (this.playerExtendConfig == null) ? 0 : this.playerExtendConfig.size();
  }

  public java.util.Iterator<String> getPlayerExtendConfigIterator() {
    return (this.playerExtendConfig == null) ? null : this.playerExtendConfig.iterator();
  }

  public void addToPlayerExtendConfig(String elem) {
    if (this.playerExtendConfig == null) {
      this.playerExtendConfig = new HashSet<String>();
    }
    this.playerExtendConfig.add(elem);
  }

  public Set<String> getPlayerExtendConfig() {
    return this.playerExtendConfig;
  }

  public void setPlayerExtendConfig(Set<String> playerExtendConfig) {
    this.playerExtendConfig = playerExtendConfig;
  }

  public void unsetPlayerExtendConfig() {
    this.playerExtendConfig = null;
  }

  /** Returns true if field playerExtendConfig is set (has been assigned a value) and false otherwise */
  public boolean isSetPlayerExtendConfig() {
    return this.playerExtendConfig != null;
  }

  public void setPlayerExtendConfigIsSet(boolean value) {
    if (!value) {
      this.playerExtendConfig = null;
    }
  }

  public int getMatchExtendConfigSize() {
    return (this.matchExtendConfig == null) ? 0 : this.matchExtendConfig.size();
  }

  public java.util.Iterator<String> getMatchExtendConfigIterator() {
    return (this.matchExtendConfig == null) ? null : this.matchExtendConfig.iterator();
  }

  public void addToMatchExtendConfig(String elem) {
    if (this.matchExtendConfig == null) {
      this.matchExtendConfig = new HashSet<String>();
    }
    this.matchExtendConfig.add(elem);
  }

  public Set<String> getMatchExtendConfig() {
    return this.matchExtendConfig;
  }

  public void setMatchExtendConfig(Set<String> matchExtendConfig) {
    this.matchExtendConfig = matchExtendConfig;
  }

  public void unsetMatchExtendConfig() {
    this.matchExtendConfig = null;
  }

  /** Returns true if field matchExtendConfig is set (has been assigned a value) and false otherwise */
  public boolean isSetMatchExtendConfig() {
    return this.matchExtendConfig != null;
  }

  public void setMatchExtendConfigIsSet(boolean value) {
    if (!value) {
      this.matchExtendConfig = null;
    }
  }

  public int getResultConditionConfigSize() {
    return (this.resultConditionConfig == null) ? 0 : this.resultConditionConfig.size();
  }

  public java.util.Iterator<String> getResultConditionConfigIterator() {
    return (this.resultConditionConfig == null) ? null : this.resultConditionConfig.iterator();
  }

  public void addToResultConditionConfig(String elem) {
    if (this.resultConditionConfig == null) {
      this.resultConditionConfig = new HashSet<String>();
    }
    this.resultConditionConfig.add(elem);
  }

  public Set<String> getResultConditionConfig() {
    return this.resultConditionConfig;
  }

  public void setResultConditionConfig(Set<String> resultConditionConfig) {
    this.resultConditionConfig = resultConditionConfig;
  }

  public void unsetResultConditionConfig() {
    this.resultConditionConfig = null;
  }

  /** Returns true if field resultConditionConfig is set (has been assigned a value) and false otherwise */
  public boolean isSetResultConditionConfig() {
    return this.resultConditionConfig != null;
  }

  public void setResultConditionConfigIsSet(boolean value) {
    if (!value) {
      this.resultConditionConfig = null;
    }
  }

  public int getResultConfigSize() {
    return (this.resultConfig == null) ? 0 : this.resultConfig.size();
  }

  public java.util.Iterator<String> getResultConfigIterator() {
    return (this.resultConfig == null) ? null : this.resultConfig.iterator();
  }

  public void addToResultConfig(String elem) {
    if (this.resultConfig == null) {
      this.resultConfig = new HashSet<String>();
    }
    this.resultConfig.add(elem);
  }

  public Set<String> getResultConfig() {
    return this.resultConfig;
  }

  public void setResultConfig(Set<String> resultConfig) {
    this.resultConfig = resultConfig;
  }

  public void unsetResultConfig() {
    this.resultConfig = null;
  }

  /** Returns true if field resultConfig is set (has been assigned a value) and false otherwise */
  public boolean isSetResultConfig() {
    return this.resultConfig != null;
  }

  public void setResultConfigIsSet(boolean value) {
    if (!value) {
      this.resultConfig = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case COMPETITOR_STATS_CONDITION_CONFIG:
      if (value == null) {
        unsetCompetitorStatsConditionConfig();
      } else {
        setCompetitorStatsConditionConfig((Set<String>)value);
      }
      break;

    case COMPETITOR_STATS_CONFIG:
      if (value == null) {
        unsetCompetitorStatsConfig();
      } else {
        setCompetitorStatsConfig((Set<String>)value);
      }
      break;

    case PLAYER_STATS_CONDITION_CONFIG:
      if (value == null) {
        unsetPlayerStatsConditionConfig();
      } else {
        setPlayerStatsConditionConfig((Set<String>)value);
      }
      break;

    case PLAYER_STATS_CONFIG:
      if (value == null) {
        unsetPlayerStatsConfig();
      } else {
        setPlayerStatsConfig((Set<String>)value);
      }
      break;

    case TEAM_EXTEND_CONFIG:
      if (value == null) {
        unsetTeamExtendConfig();
      } else {
        setTeamExtendConfig((Set<String>)value);
      }
      break;

    case PLAYER_EXTEND_CONFIG:
      if (value == null) {
        unsetPlayerExtendConfig();
      } else {
        setPlayerExtendConfig((Set<String>)value);
      }
      break;

    case MATCH_EXTEND_CONFIG:
      if (value == null) {
        unsetMatchExtendConfig();
      } else {
        setMatchExtendConfig((Set<String>)value);
      }
      break;

    case RESULT_CONDITION_CONFIG:
      if (value == null) {
        unsetResultConditionConfig();
      } else {
        setResultConditionConfig((Set<String>)value);
      }
      break;

    case RESULT_CONFIG:
      if (value == null) {
        unsetResultConfig();
      } else {
        setResultConfig((Set<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case COMPETITOR_STATS_CONDITION_CONFIG:
      return getCompetitorStatsConditionConfig();

    case COMPETITOR_STATS_CONFIG:
      return getCompetitorStatsConfig();

    case PLAYER_STATS_CONDITION_CONFIG:
      return getPlayerStatsConditionConfig();

    case PLAYER_STATS_CONFIG:
      return getPlayerStatsConfig();

    case TEAM_EXTEND_CONFIG:
      return getTeamExtendConfig();

    case PLAYER_EXTEND_CONFIG:
      return getPlayerExtendConfig();

    case MATCH_EXTEND_CONFIG:
      return getMatchExtendConfig();

    case RESULT_CONDITION_CONFIG:
      return getResultConditionConfig();

    case RESULT_CONFIG:
      return getResultConfig();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case COMPETITOR_STATS_CONDITION_CONFIG:
      return isSetCompetitorStatsConditionConfig();
    case COMPETITOR_STATS_CONFIG:
      return isSetCompetitorStatsConfig();
    case PLAYER_STATS_CONDITION_CONFIG:
      return isSetPlayerStatsConditionConfig();
    case PLAYER_STATS_CONFIG:
      return isSetPlayerStatsConfig();
    case TEAM_EXTEND_CONFIG:
      return isSetTeamExtendConfig();
    case PLAYER_EXTEND_CONFIG:
      return isSetPlayerExtendConfig();
    case MATCH_EXTEND_CONFIG:
      return isSetMatchExtendConfig();
    case RESULT_CONDITION_CONFIG:
      return isSetResultConditionConfig();
    case RESULT_CONFIG:
      return isSetResultConfig();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TOlympicSettingDataSet)
      return this.equals((TOlympicSettingDataSet)that);
    return false;
  }

  public boolean equals(TOlympicSettingDataSet that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_competitorStatsConditionConfig = true && this.isSetCompetitorStatsConditionConfig();
    boolean that_present_competitorStatsConditionConfig = true && that.isSetCompetitorStatsConditionConfig();
    if (this_present_competitorStatsConditionConfig || that_present_competitorStatsConditionConfig) {
      if (!(this_present_competitorStatsConditionConfig && that_present_competitorStatsConditionConfig))
        return false;
      if (!this.competitorStatsConditionConfig.equals(that.competitorStatsConditionConfig))
        return false;
    }

    boolean this_present_competitorStatsConfig = true && this.isSetCompetitorStatsConfig();
    boolean that_present_competitorStatsConfig = true && that.isSetCompetitorStatsConfig();
    if (this_present_competitorStatsConfig || that_present_competitorStatsConfig) {
      if (!(this_present_competitorStatsConfig && that_present_competitorStatsConfig))
        return false;
      if (!this.competitorStatsConfig.equals(that.competitorStatsConfig))
        return false;
    }

    boolean this_present_playerStatsConditionConfig = true && this.isSetPlayerStatsConditionConfig();
    boolean that_present_playerStatsConditionConfig = true && that.isSetPlayerStatsConditionConfig();
    if (this_present_playerStatsConditionConfig || that_present_playerStatsConditionConfig) {
      if (!(this_present_playerStatsConditionConfig && that_present_playerStatsConditionConfig))
        return false;
      if (!this.playerStatsConditionConfig.equals(that.playerStatsConditionConfig))
        return false;
    }

    boolean this_present_playerStatsConfig = true && this.isSetPlayerStatsConfig();
    boolean that_present_playerStatsConfig = true && that.isSetPlayerStatsConfig();
    if (this_present_playerStatsConfig || that_present_playerStatsConfig) {
      if (!(this_present_playerStatsConfig && that_present_playerStatsConfig))
        return false;
      if (!this.playerStatsConfig.equals(that.playerStatsConfig))
        return false;
    }

    boolean this_present_teamExtendConfig = true && this.isSetTeamExtendConfig();
    boolean that_present_teamExtendConfig = true && that.isSetTeamExtendConfig();
    if (this_present_teamExtendConfig || that_present_teamExtendConfig) {
      if (!(this_present_teamExtendConfig && that_present_teamExtendConfig))
        return false;
      if (!this.teamExtendConfig.equals(that.teamExtendConfig))
        return false;
    }

    boolean this_present_playerExtendConfig = true && this.isSetPlayerExtendConfig();
    boolean that_present_playerExtendConfig = true && that.isSetPlayerExtendConfig();
    if (this_present_playerExtendConfig || that_present_playerExtendConfig) {
      if (!(this_present_playerExtendConfig && that_present_playerExtendConfig))
        return false;
      if (!this.playerExtendConfig.equals(that.playerExtendConfig))
        return false;
    }

    boolean this_present_matchExtendConfig = true && this.isSetMatchExtendConfig();
    boolean that_present_matchExtendConfig = true && that.isSetMatchExtendConfig();
    if (this_present_matchExtendConfig || that_present_matchExtendConfig) {
      if (!(this_present_matchExtendConfig && that_present_matchExtendConfig))
        return false;
      if (!this.matchExtendConfig.equals(that.matchExtendConfig))
        return false;
    }

    boolean this_present_resultConditionConfig = true && this.isSetResultConditionConfig();
    boolean that_present_resultConditionConfig = true && that.isSetResultConditionConfig();
    if (this_present_resultConditionConfig || that_present_resultConditionConfig) {
      if (!(this_present_resultConditionConfig && that_present_resultConditionConfig))
        return false;
      if (!this.resultConditionConfig.equals(that.resultConditionConfig))
        return false;
    }

    boolean this_present_resultConfig = true && this.isSetResultConfig();
    boolean that_present_resultConfig = true && that.isSetResultConfig();
    if (this_present_resultConfig || that_present_resultConfig) {
      if (!(this_present_resultConfig && that_present_resultConfig))
        return false;
      if (!this.resultConfig.equals(that.resultConfig))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_competitorStatsConditionConfig = true && (isSetCompetitorStatsConditionConfig());
    list.add(present_competitorStatsConditionConfig);
    if (present_competitorStatsConditionConfig)
      list.add(competitorStatsConditionConfig);

    boolean present_competitorStatsConfig = true && (isSetCompetitorStatsConfig());
    list.add(present_competitorStatsConfig);
    if (present_competitorStatsConfig)
      list.add(competitorStatsConfig);

    boolean present_playerStatsConditionConfig = true && (isSetPlayerStatsConditionConfig());
    list.add(present_playerStatsConditionConfig);
    if (present_playerStatsConditionConfig)
      list.add(playerStatsConditionConfig);

    boolean present_playerStatsConfig = true && (isSetPlayerStatsConfig());
    list.add(present_playerStatsConfig);
    if (present_playerStatsConfig)
      list.add(playerStatsConfig);

    boolean present_teamExtendConfig = true && (isSetTeamExtendConfig());
    list.add(present_teamExtendConfig);
    if (present_teamExtendConfig)
      list.add(teamExtendConfig);

    boolean present_playerExtendConfig = true && (isSetPlayerExtendConfig());
    list.add(present_playerExtendConfig);
    if (present_playerExtendConfig)
      list.add(playerExtendConfig);

    boolean present_matchExtendConfig = true && (isSetMatchExtendConfig());
    list.add(present_matchExtendConfig);
    if (present_matchExtendConfig)
      list.add(matchExtendConfig);

    boolean present_resultConditionConfig = true && (isSetResultConditionConfig());
    list.add(present_resultConditionConfig);
    if (present_resultConditionConfig)
      list.add(resultConditionConfig);

    boolean present_resultConfig = true && (isSetResultConfig());
    list.add(present_resultConfig);
    if (present_resultConfig)
      list.add(resultConfig);

    return list.hashCode();
  }

  @Override
  public int compareTo(TOlympicSettingDataSet other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompetitorStatsConditionConfig()).compareTo(other.isSetCompetitorStatsConditionConfig());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompetitorStatsConditionConfig()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.competitorStatsConditionConfig, other.competitorStatsConditionConfig);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompetitorStatsConfig()).compareTo(other.isSetCompetitorStatsConfig());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompetitorStatsConfig()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.competitorStatsConfig, other.competitorStatsConfig);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlayerStatsConditionConfig()).compareTo(other.isSetPlayerStatsConditionConfig());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlayerStatsConditionConfig()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.playerStatsConditionConfig, other.playerStatsConditionConfig);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlayerStatsConfig()).compareTo(other.isSetPlayerStatsConfig());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlayerStatsConfig()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.playerStatsConfig, other.playerStatsConfig);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeamExtendConfig()).compareTo(other.isSetTeamExtendConfig());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeamExtendConfig()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teamExtendConfig, other.teamExtendConfig);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlayerExtendConfig()).compareTo(other.isSetPlayerExtendConfig());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlayerExtendConfig()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.playerExtendConfig, other.playerExtendConfig);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMatchExtendConfig()).compareTo(other.isSetMatchExtendConfig());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMatchExtendConfig()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchExtendConfig, other.matchExtendConfig);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResultConditionConfig()).compareTo(other.isSetResultConditionConfig());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultConditionConfig()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resultConditionConfig, other.resultConditionConfig);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResultConfig()).compareTo(other.isSetResultConfig());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultConfig()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resultConfig, other.resultConfig);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TOlympicSettingDataSet(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (isSetCompetitorStatsConditionConfig()) {
      if (!first) sb.append(", ");
      sb.append("competitorStatsConditionConfig:");
      if (this.competitorStatsConditionConfig == null) {
        sb.append("null");
      } else {
        sb.append(this.competitorStatsConditionConfig);
      }
      first = false;
    }
    if (isSetCompetitorStatsConfig()) {
      if (!first) sb.append(", ");
      sb.append("competitorStatsConfig:");
      if (this.competitorStatsConfig == null) {
        sb.append("null");
      } else {
        sb.append(this.competitorStatsConfig);
      }
      first = false;
    }
    if (isSetPlayerStatsConditionConfig()) {
      if (!first) sb.append(", ");
      sb.append("playerStatsConditionConfig:");
      if (this.playerStatsConditionConfig == null) {
        sb.append("null");
      } else {
        sb.append(this.playerStatsConditionConfig);
      }
      first = false;
    }
    if (isSetPlayerStatsConfig()) {
      if (!first) sb.append(", ");
      sb.append("playerStatsConfig:");
      if (this.playerStatsConfig == null) {
        sb.append("null");
      } else {
        sb.append(this.playerStatsConfig);
      }
      first = false;
    }
    if (isSetTeamExtendConfig()) {
      if (!first) sb.append(", ");
      sb.append("teamExtendConfig:");
      if (this.teamExtendConfig == null) {
        sb.append("null");
      } else {
        sb.append(this.teamExtendConfig);
      }
      first = false;
    }
    if (isSetPlayerExtendConfig()) {
      if (!first) sb.append(", ");
      sb.append("playerExtendConfig:");
      if (this.playerExtendConfig == null) {
        sb.append("null");
      } else {
        sb.append(this.playerExtendConfig);
      }
      first = false;
    }
    if (isSetMatchExtendConfig()) {
      if (!first) sb.append(", ");
      sb.append("matchExtendConfig:");
      if (this.matchExtendConfig == null) {
        sb.append("null");
      } else {
        sb.append(this.matchExtendConfig);
      }
      first = false;
    }
    if (isSetResultConditionConfig()) {
      if (!first) sb.append(", ");
      sb.append("resultConditionConfig:");
      if (this.resultConditionConfig == null) {
        sb.append("null");
      } else {
        sb.append(this.resultConditionConfig);
      }
      first = false;
    }
    if (isSetResultConfig()) {
      if (!first) sb.append(", ");
      sb.append("resultConfig:");
      if (this.resultConfig == null) {
        sb.append("null");
      } else {
        sb.append(this.resultConfig);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TOlympicSettingDataSetStandardSchemeFactory implements SchemeFactory {
    public TOlympicSettingDataSetStandardScheme getScheme() {
      return new TOlympicSettingDataSetStandardScheme();
    }
  }

  private static class TOlympicSettingDataSetStandardScheme extends StandardScheme<TOlympicSettingDataSet> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TOlympicSettingDataSet struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COMPETITOR_STATS_CONDITION_CONFIG
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set48 = iprot.readSetBegin();
                struct.competitorStatsConditionConfig = new HashSet<String>(2*_set48.size);
                String _elem49;
                for (int _i50 = 0; _i50 < _set48.size; ++_i50)
                {
                  _elem49 = iprot.readString();
                  struct.competitorStatsConditionConfig.add(_elem49);
                }
                iprot.readSetEnd();
              }
              struct.setCompetitorStatsConditionConfigIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMPETITOR_STATS_CONFIG
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set51 = iprot.readSetBegin();
                struct.competitorStatsConfig = new HashSet<String>(2*_set51.size);
                String _elem52;
                for (int _i53 = 0; _i53 < _set51.size; ++_i53)
                {
                  _elem52 = iprot.readString();
                  struct.competitorStatsConfig.add(_elem52);
                }
                iprot.readSetEnd();
              }
              struct.setCompetitorStatsConfigIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PLAYER_STATS_CONDITION_CONFIG
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set54 = iprot.readSetBegin();
                struct.playerStatsConditionConfig = new HashSet<String>(2*_set54.size);
                String _elem55;
                for (int _i56 = 0; _i56 < _set54.size; ++_i56)
                {
                  _elem55 = iprot.readString();
                  struct.playerStatsConditionConfig.add(_elem55);
                }
                iprot.readSetEnd();
              }
              struct.setPlayerStatsConditionConfigIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PLAYER_STATS_CONFIG
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set57 = iprot.readSetBegin();
                struct.playerStatsConfig = new HashSet<String>(2*_set57.size);
                String _elem58;
                for (int _i59 = 0; _i59 < _set57.size; ++_i59)
                {
                  _elem58 = iprot.readString();
                  struct.playerStatsConfig.add(_elem58);
                }
                iprot.readSetEnd();
              }
              struct.setPlayerStatsConfigIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TEAM_EXTEND_CONFIG
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set60 = iprot.readSetBegin();
                struct.teamExtendConfig = new HashSet<String>(2*_set60.size);
                String _elem61;
                for (int _i62 = 0; _i62 < _set60.size; ++_i62)
                {
                  _elem61 = iprot.readString();
                  struct.teamExtendConfig.add(_elem61);
                }
                iprot.readSetEnd();
              }
              struct.setTeamExtendConfigIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PLAYER_EXTEND_CONFIG
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set63 = iprot.readSetBegin();
                struct.playerExtendConfig = new HashSet<String>(2*_set63.size);
                String _elem64;
                for (int _i65 = 0; _i65 < _set63.size; ++_i65)
                {
                  _elem64 = iprot.readString();
                  struct.playerExtendConfig.add(_elem64);
                }
                iprot.readSetEnd();
              }
              struct.setPlayerExtendConfigIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MATCH_EXTEND_CONFIG
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set66 = iprot.readSetBegin();
                struct.matchExtendConfig = new HashSet<String>(2*_set66.size);
                String _elem67;
                for (int _i68 = 0; _i68 < _set66.size; ++_i68)
                {
                  _elem67 = iprot.readString();
                  struct.matchExtendConfig.add(_elem67);
                }
                iprot.readSetEnd();
              }
              struct.setMatchExtendConfigIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // RESULT_CONDITION_CONFIG
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set69 = iprot.readSetBegin();
                struct.resultConditionConfig = new HashSet<String>(2*_set69.size);
                String _elem70;
                for (int _i71 = 0; _i71 < _set69.size; ++_i71)
                {
                  _elem70 = iprot.readString();
                  struct.resultConditionConfig.add(_elem70);
                }
                iprot.readSetEnd();
              }
              struct.setResultConditionConfigIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // RESULT_CONFIG
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set72 = iprot.readSetBegin();
                struct.resultConfig = new HashSet<String>(2*_set72.size);
                String _elem73;
                for (int _i74 = 0; _i74 < _set72.size; ++_i74)
                {
                  _elem73 = iprot.readString();
                  struct.resultConfig.add(_elem73);
                }
                iprot.readSetEnd();
              }
              struct.setResultConfigIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TOlympicSettingDataSet struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.competitorStatsConditionConfig != null) {
        if (struct.isSetCompetitorStatsConditionConfig()) {
          oprot.writeFieldBegin(COMPETITOR_STATS_CONDITION_CONFIG_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.competitorStatsConditionConfig.size()));
            for (String _iter75 : struct.competitorStatsConditionConfig)
            {
              oprot.writeString(_iter75);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.competitorStatsConfig != null) {
        if (struct.isSetCompetitorStatsConfig()) {
          oprot.writeFieldBegin(COMPETITOR_STATS_CONFIG_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.competitorStatsConfig.size()));
            for (String _iter76 : struct.competitorStatsConfig)
            {
              oprot.writeString(_iter76);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.playerStatsConditionConfig != null) {
        if (struct.isSetPlayerStatsConditionConfig()) {
          oprot.writeFieldBegin(PLAYER_STATS_CONDITION_CONFIG_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.playerStatsConditionConfig.size()));
            for (String _iter77 : struct.playerStatsConditionConfig)
            {
              oprot.writeString(_iter77);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.playerStatsConfig != null) {
        if (struct.isSetPlayerStatsConfig()) {
          oprot.writeFieldBegin(PLAYER_STATS_CONFIG_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.playerStatsConfig.size()));
            for (String _iter78 : struct.playerStatsConfig)
            {
              oprot.writeString(_iter78);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.teamExtendConfig != null) {
        if (struct.isSetTeamExtendConfig()) {
          oprot.writeFieldBegin(TEAM_EXTEND_CONFIG_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.teamExtendConfig.size()));
            for (String _iter79 : struct.teamExtendConfig)
            {
              oprot.writeString(_iter79);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.playerExtendConfig != null) {
        if (struct.isSetPlayerExtendConfig()) {
          oprot.writeFieldBegin(PLAYER_EXTEND_CONFIG_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.playerExtendConfig.size()));
            for (String _iter80 : struct.playerExtendConfig)
            {
              oprot.writeString(_iter80);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.matchExtendConfig != null) {
        if (struct.isSetMatchExtendConfig()) {
          oprot.writeFieldBegin(MATCH_EXTEND_CONFIG_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.matchExtendConfig.size()));
            for (String _iter81 : struct.matchExtendConfig)
            {
              oprot.writeString(_iter81);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.resultConditionConfig != null) {
        if (struct.isSetResultConditionConfig()) {
          oprot.writeFieldBegin(RESULT_CONDITION_CONFIG_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.resultConditionConfig.size()));
            for (String _iter82 : struct.resultConditionConfig)
            {
              oprot.writeString(_iter82);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.resultConfig != null) {
        if (struct.isSetResultConfig()) {
          oprot.writeFieldBegin(RESULT_CONFIG_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.resultConfig.size()));
            for (String _iter83 : struct.resultConfig)
            {
              oprot.writeString(_iter83);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TOlympicSettingDataSetTupleSchemeFactory implements SchemeFactory {
    public TOlympicSettingDataSetTupleScheme getScheme() {
      return new TOlympicSettingDataSetTupleScheme();
    }
  }

  private static class TOlympicSettingDataSetTupleScheme extends TupleScheme<TOlympicSettingDataSet> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TOlympicSettingDataSet struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetCompetitorStatsConditionConfig()) {
        optionals.set(1);
      }
      if (struct.isSetCompetitorStatsConfig()) {
        optionals.set(2);
      }
      if (struct.isSetPlayerStatsConditionConfig()) {
        optionals.set(3);
      }
      if (struct.isSetPlayerStatsConfig()) {
        optionals.set(4);
      }
      if (struct.isSetTeamExtendConfig()) {
        optionals.set(5);
      }
      if (struct.isSetPlayerExtendConfig()) {
        optionals.set(6);
      }
      if (struct.isSetMatchExtendConfig()) {
        optionals.set(7);
      }
      if (struct.isSetResultConditionConfig()) {
        optionals.set(8);
      }
      if (struct.isSetResultConfig()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetCompetitorStatsConditionConfig()) {
        {
          oprot.writeI32(struct.competitorStatsConditionConfig.size());
          for (String _iter84 : struct.competitorStatsConditionConfig)
          {
            oprot.writeString(_iter84);
          }
        }
      }
      if (struct.isSetCompetitorStatsConfig()) {
        {
          oprot.writeI32(struct.competitorStatsConfig.size());
          for (String _iter85 : struct.competitorStatsConfig)
          {
            oprot.writeString(_iter85);
          }
        }
      }
      if (struct.isSetPlayerStatsConditionConfig()) {
        {
          oprot.writeI32(struct.playerStatsConditionConfig.size());
          for (String _iter86 : struct.playerStatsConditionConfig)
          {
            oprot.writeString(_iter86);
          }
        }
      }
      if (struct.isSetPlayerStatsConfig()) {
        {
          oprot.writeI32(struct.playerStatsConfig.size());
          for (String _iter87 : struct.playerStatsConfig)
          {
            oprot.writeString(_iter87);
          }
        }
      }
      if (struct.isSetTeamExtendConfig()) {
        {
          oprot.writeI32(struct.teamExtendConfig.size());
          for (String _iter88 : struct.teamExtendConfig)
          {
            oprot.writeString(_iter88);
          }
        }
      }
      if (struct.isSetPlayerExtendConfig()) {
        {
          oprot.writeI32(struct.playerExtendConfig.size());
          for (String _iter89 : struct.playerExtendConfig)
          {
            oprot.writeString(_iter89);
          }
        }
      }
      if (struct.isSetMatchExtendConfig()) {
        {
          oprot.writeI32(struct.matchExtendConfig.size());
          for (String _iter90 : struct.matchExtendConfig)
          {
            oprot.writeString(_iter90);
          }
        }
      }
      if (struct.isSetResultConditionConfig()) {
        {
          oprot.writeI32(struct.resultConditionConfig.size());
          for (String _iter91 : struct.resultConditionConfig)
          {
            oprot.writeString(_iter91);
          }
        }
      }
      if (struct.isSetResultConfig()) {
        {
          oprot.writeI32(struct.resultConfig.size());
          for (String _iter92 : struct.resultConfig)
          {
            oprot.writeString(_iter92);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TOlympicSettingDataSet struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TSet _set93 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.competitorStatsConditionConfig = new HashSet<String>(2*_set93.size);
          String _elem94;
          for (int _i95 = 0; _i95 < _set93.size; ++_i95)
          {
            _elem94 = iprot.readString();
            struct.competitorStatsConditionConfig.add(_elem94);
          }
        }
        struct.setCompetitorStatsConditionConfigIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TSet _set96 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.competitorStatsConfig = new HashSet<String>(2*_set96.size);
          String _elem97;
          for (int _i98 = 0; _i98 < _set96.size; ++_i98)
          {
            _elem97 = iprot.readString();
            struct.competitorStatsConfig.add(_elem97);
          }
        }
        struct.setCompetitorStatsConfigIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TSet _set99 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.playerStatsConditionConfig = new HashSet<String>(2*_set99.size);
          String _elem100;
          for (int _i101 = 0; _i101 < _set99.size; ++_i101)
          {
            _elem100 = iprot.readString();
            struct.playerStatsConditionConfig.add(_elem100);
          }
        }
        struct.setPlayerStatsConditionConfigIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TSet _set102 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.playerStatsConfig = new HashSet<String>(2*_set102.size);
          String _elem103;
          for (int _i104 = 0; _i104 < _set102.size; ++_i104)
          {
            _elem103 = iprot.readString();
            struct.playerStatsConfig.add(_elem103);
          }
        }
        struct.setPlayerStatsConfigIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TSet _set105 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.teamExtendConfig = new HashSet<String>(2*_set105.size);
          String _elem106;
          for (int _i107 = 0; _i107 < _set105.size; ++_i107)
          {
            _elem106 = iprot.readString();
            struct.teamExtendConfig.add(_elem106);
          }
        }
        struct.setTeamExtendConfigIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TSet _set108 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.playerExtendConfig = new HashSet<String>(2*_set108.size);
          String _elem109;
          for (int _i110 = 0; _i110 < _set108.size; ++_i110)
          {
            _elem109 = iprot.readString();
            struct.playerExtendConfig.add(_elem109);
          }
        }
        struct.setPlayerExtendConfigIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TSet _set111 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.matchExtendConfig = new HashSet<String>(2*_set111.size);
          String _elem112;
          for (int _i113 = 0; _i113 < _set111.size; ++_i113)
          {
            _elem112 = iprot.readString();
            struct.matchExtendConfig.add(_elem112);
          }
        }
        struct.setMatchExtendConfigIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TSet _set114 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.resultConditionConfig = new HashSet<String>(2*_set114.size);
          String _elem115;
          for (int _i116 = 0; _i116 < _set114.size; ++_i116)
          {
            _elem115 = iprot.readString();
            struct.resultConditionConfig.add(_elem115);
          }
        }
        struct.setResultConditionConfigIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TSet _set117 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.resultConfig = new HashSet<String>(2*_set117.size);
          String _elem118;
          for (int _i119 = 0; _i119 < _set117.size; ++_i119)
          {
            _elem118 = iprot.readString();
            struct.resultConfig.add(_elem118);
          }
        }
        struct.setResultConfigIsSet(true);
      }
    }
  }

}

