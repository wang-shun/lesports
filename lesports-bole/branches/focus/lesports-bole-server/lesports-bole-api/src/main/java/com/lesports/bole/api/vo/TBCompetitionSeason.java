/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lesports.bole.api.vo;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 赛季信息
 * 
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-7-5")
public class TBCompetitionSeason implements org.apache.thrift.TBase<TBCompetitionSeason, TBCompetitionSeason._Fields>, java.io.Serializable, Cloneable, Comparable<TBCompetitionSeason> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TBCompetitionSeason");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField COMPETITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("competitionId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField SMS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("smsId", org.apache.thrift.protocol.TType.I64, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TBCompetitionSeasonStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TBCompetitionSeasonTupleSchemeFactory());
  }

  private long id; // required
  private String name; // optional
  private long competitionId; // optional
  private long smsId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    COMPETITION_ID((short)3, "competitionId"),
    SMS_ID((short)4, "smsId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // COMPETITION_ID
          return COMPETITION_ID;
        case 4: // SMS_ID
          return SMS_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __COMPETITIONID_ISSET_ID = 1;
  private static final int __SMSID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.NAME,_Fields.COMPETITION_ID,_Fields.SMS_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPETITION_ID, new org.apache.thrift.meta_data.FieldMetaData("competitionId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SMS_ID, new org.apache.thrift.meta_data.FieldMetaData("smsId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TBCompetitionSeason.class, metaDataMap);
  }

  public TBCompetitionSeason() {
  }

  public TBCompetitionSeason(
    long id)
  {
    this();
    this.id = id;
    setIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TBCompetitionSeason(TBCompetitionSeason other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.competitionId = other.competitionId;
    this.smsId = other.smsId;
  }

  public TBCompetitionSeason deepCopy() {
    return new TBCompetitionSeason(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.name = null;
    setCompetitionIdIsSet(false);
    this.competitionId = 0;
    setSmsIdIsSet(false);
    this.smsId = 0;
  }

  public long getId() {
    return this.id;
  }

  public void setId(long id) {
    this.id = id;
    setIdIsSet(true);
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public long getCompetitionId() {
    return this.competitionId;
  }

  public void setCompetitionId(long competitionId) {
    this.competitionId = competitionId;
    setCompetitionIdIsSet(true);
  }

  public void unsetCompetitionId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPETITIONID_ISSET_ID);
  }

  /** Returns true if field competitionId is set (has been assigned a value) and false otherwise */
  public boolean isSetCompetitionId() {
    return EncodingUtils.testBit(__isset_bitfield, __COMPETITIONID_ISSET_ID);
  }

  public void setCompetitionIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPETITIONID_ISSET_ID, value);
  }

  public long getSmsId() {
    return this.smsId;
  }

  public void setSmsId(long smsId) {
    this.smsId = smsId;
    setSmsIdIsSet(true);
  }

  public void unsetSmsId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SMSID_ISSET_ID);
  }

  /** Returns true if field smsId is set (has been assigned a value) and false otherwise */
  public boolean isSetSmsId() {
    return EncodingUtils.testBit(__isset_bitfield, __SMSID_ISSET_ID);
  }

  public void setSmsIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SMSID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case COMPETITION_ID:
      if (value == null) {
        unsetCompetitionId();
      } else {
        setCompetitionId((Long)value);
      }
      break;

    case SMS_ID:
      if (value == null) {
        unsetSmsId();
      } else {
        setSmsId((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case NAME:
      return getName();

    case COMPETITION_ID:
      return Long.valueOf(getCompetitionId());

    case SMS_ID:
      return Long.valueOf(getSmsId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case COMPETITION_ID:
      return isSetCompetitionId();
    case SMS_ID:
      return isSetSmsId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TBCompetitionSeason)
      return this.equals((TBCompetitionSeason)that);
    return false;
  }

  public boolean equals(TBCompetitionSeason that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_competitionId = true && this.isSetCompetitionId();
    boolean that_present_competitionId = true && that.isSetCompetitionId();
    if (this_present_competitionId || that_present_competitionId) {
      if (!(this_present_competitionId && that_present_competitionId))
        return false;
      if (this.competitionId != that.competitionId)
        return false;
    }

    boolean this_present_smsId = true && this.isSetSmsId();
    boolean that_present_smsId = true && that.isSetSmsId();
    if (this_present_smsId || that_present_smsId) {
      if (!(this_present_smsId && that_present_smsId))
        return false;
      if (this.smsId != that.smsId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_competitionId = true && (isSetCompetitionId());
    list.add(present_competitionId);
    if (present_competitionId)
      list.add(competitionId);

    boolean present_smsId = true && (isSetSmsId());
    list.add(present_smsId);
    if (present_smsId)
      list.add(smsId);

    return list.hashCode();
  }

  @Override
  public int compareTo(TBCompetitionSeason other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompetitionId()).compareTo(other.isSetCompetitionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompetitionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.competitionId, other.competitionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSmsId()).compareTo(other.isSetSmsId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSmsId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.smsId, other.smsId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TBCompetitionSeason(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetCompetitionId()) {
      if (!first) sb.append(", ");
      sb.append("competitionId:");
      sb.append(this.competitionId);
      first = false;
    }
    if (isSetSmsId()) {
      if (!first) sb.append(", ");
      sb.append("smsId:");
      sb.append(this.smsId);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TBCompetitionSeasonStandardSchemeFactory implements SchemeFactory {
    public TBCompetitionSeasonStandardScheme getScheme() {
      return new TBCompetitionSeasonStandardScheme();
    }
  }

  private static class TBCompetitionSeasonStandardScheme extends StandardScheme<TBCompetitionSeason> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TBCompetitionSeason struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMPETITION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.competitionId = iprot.readI64();
              struct.setCompetitionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SMS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.smsId = iprot.readI64();
              struct.setSmsIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TBCompetitionSeason struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCompetitionId()) {
        oprot.writeFieldBegin(COMPETITION_ID_FIELD_DESC);
        oprot.writeI64(struct.competitionId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSmsId()) {
        oprot.writeFieldBegin(SMS_ID_FIELD_DESC);
        oprot.writeI64(struct.smsId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TBCompetitionSeasonTupleSchemeFactory implements SchemeFactory {
    public TBCompetitionSeasonTupleScheme getScheme() {
      return new TBCompetitionSeasonTupleScheme();
    }
  }

  private static class TBCompetitionSeasonTupleScheme extends TupleScheme<TBCompetitionSeason> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TBCompetitionSeason struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetCompetitionId()) {
        optionals.set(2);
      }
      if (struct.isSetSmsId()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetCompetitionId()) {
        oprot.writeI64(struct.competitionId);
      }
      if (struct.isSetSmsId()) {
        oprot.writeI64(struct.smsId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TBCompetitionSeason struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.competitionId = iprot.readI64();
        struct.setCompetitionIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.smsId = iprot.readI64();
        struct.setSmsIdIsSet(true);
      }
    }
  }

}

